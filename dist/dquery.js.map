{"mappings":"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","sources":["dist/dquery.js"],"sourcesContent":["class $d06b2385a2707aa5$var$DQueryNode {\n    /**\n   * DQueryNode wraps DOM Element objects with enhanced functionality.\n   *\n   * @param {Element} node A DOM Element object, which represents an HTML tag.\n   */ constructor(node){\n        this.node = node;\n    }\n    /**\n   * Gets the underlying native DOM Element object.\n   *\n   * @returns Element\n   */ get() {\n        return this.node;\n    }\n    /**\n   * Gets the nearest ancestor which matches a selector. If no selector is\n   * given, returns parent.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ ancestor(selector) {\n        selector = selector || '';\n        if (selector === '') return this.parent();\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.closest(selector));\n    }\n    /**\n   * Gets the immediate parent element.\n   *\n   * @returns DQueryNode\n   */ parent() {\n        if (!this.node.parentNode) return null;\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.parentNode);\n    }\n    /**\n   * Gets all descendants which match a selector. If no selector is given,\n   * returns children.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQuery\n   */ descendants(selector) {\n        selector = selector || '';\n        if (selector === '') return this.children();\n        return new DQuery(selector, this.node); // eslint-disable-line no-undef\n    }\n    /**\n   * Gets all immediate children which match a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns []DQueryNode\n   */ children(selector) {\n        selector = selector || '';\n        return Array.from(this.node.childNodes).filter((e)=>e.nodeType === Node.ELEMENT_NODE\n        ).filter((e)=>selector !== '' && e.matches(selector) || selector === ''\n        ).map((e)=>new $d06b2385a2707aa5$var$DQueryNode(e)\n        );\n    }\n    /**\n   * Gets all sibling elements of the immediate parent which match a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns []DQueryNode\n   */ siblings(selector) {\n        selector = selector || '';\n        if (!this.node.parentNode) return [];\n        let sibling = this.node.parentNode.firstChild;\n        const siblings = [];\n        while(sibling){\n            if (sibling !== this.node) {\n                if (sibling.nodeType === Node.ELEMENT_NODE && (selector !== '' && sibling.matches(selector) || selector === '')) siblings.push(new $d06b2385a2707aa5$var$DQueryNode(sibling));\n            }\n            sibling = sibling.nextSibling;\n        }\n        return siblings;\n    }\n    /**\n   * Gets the immediately-next sibling which matches a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ next(selector) {\n        selector = selector || '';\n        let next = this.node.nextSibling;\n        while(next){\n            if (next.nodeType === Node.ELEMENT_NODE && (selector !== '' && next.matches(selector) || selector === '')) return new $d06b2385a2707aa5$var$DQueryNode(next);\n            next = next.nextSibling;\n        }\n        return null;\n    }\n    /**\n   * Gets the immediately-previous sibling which matches a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ prev(selector) {\n        selector = selector || '';\n        let prev = this.node.previousSibling;\n        while(prev){\n            if (prev.nodeType === Node.ELEMENT_NODE && (selector !== '' && prev.matches(selector) || selector === '')) return new $d06b2385a2707aa5$var$DQueryNode(prev);\n            prev = prev.previousSibling;\n        }\n        return null;\n    }\n    /**\n   * Prepends the provided element to the selected node, then returns a pointer\n   * to the prepended node in the DOM.\n   *\n   * @param {Element} element (Required) The DOM element to prepend.\n   * @returns DQueryNode\n   */ prepend(element) {\n        if (typeof element.dom !== 'undefined') this.node.insertAdjacentElement('afterbegin', element.dom());\n        else this.node.insertAdjacentElement('afterbegin', element);\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.childNodes[0]);\n    }\n    /**\n   * Appends the provided element to the selected node, then returns a pointer\n   * to the appended node in the DOM.\n   *\n   * @param {Element} element (Required) The DOM element to append.\n   * @returns DQueryNode\n   */ append(element) {\n        if (typeof element.dom !== 'undefined') this.node.insertAdjacentElement('beforeend', element.dom());\n        else this.node.insertAdjacentElement('beforeend', element);\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.childNodes[this.node.childNodes.length - 1]);\n    }\n    /**\n   * Inserts the provided element before the selected node, then returns a\n   * pointer to the added node in the DOM.\n   *\n   * @param {Element} element (Required) The DOM element to insert before.\n   * @returns DQueryNode\n   */ before(element) {\n        if (typeof element.dom !== 'undefined') this.node.before(element.dom());\n        else this.node.before(element);\n        return this.prev();\n    }\n    /**\n   * Inserts the provided element after the selected node, then returns a\n   * pointer to the added node in the DOM.\n   *\n   * @param {Element} element (Required) The DOM element to insert after.\n   * @returns DQueryNode\n   */ after(element) {\n        if (typeof element.dom !== 'undefined') this.node.after(element.dom());\n        else this.node.after(element);\n        return this.next();\n    }\n    /**\n   * A wrapper for addEventListener with `once: false`.\n   *\n   * @param {string} type A valid event type, like `click`. See\n   *     <https://developer.mozilla.org/en-US/docs/Web/Events> or more information.\n   * @param {string|function|Delegate} fn A callback function to execute, or a string\n   *     containing the name of the function.\n   * @returns EventPointer\n   */ on(type, fn) {\n        const node = this.node;\n        node.addEventListener(type, fn, {\n            once: false\n        });\n        return {\n            remove: function() {\n                node.removeEventListener(type, fn, {\n                    once: false\n                });\n            }\n        };\n    }\n}\nmodule.exports = DQuery = function(selector, elem) {\n    if (selector instanceof Element) return new $d06b2385a2707aa5$var$DQueryNode(selector);\n    const collection = [];\n    elem = elem || document;\n    if (elem === document) {\n        document.querySelectorAll(selector).forEach((ee)=>{\n            collection.push(new $d06b2385a2707aa5$var$DQueryNode(ee));\n        });\n        return collection;\n    }\n    selector = [\n        ':scope',\n        selector\n    ].join(' ');\n    if (typeof elem[Symbol.iterator] !== 'function') elem = [\n        elem\n    ];\n    elem.forEach((e)=>{\n        e.querySelectorAll(selector).forEach((ee)=>{\n            collection.push(new $d06b2385a2707aa5$var$DQueryNode(ee));\n        });\n    });\n    return collection;\n};\n\n\n//# sourceMappingURL=dquery.js.map\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,data:application/json;charset=utf-8;base64,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R0FBSyxDQUFDO1lBQ25ELFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGdDQUFVLENBQUMsRUFBRTtRQUNuQyxDQUFDO1FBRUQsTUFBTSxDQUFDLFVBQVU7SUFDbkIsQ0FBQztJQUVELFFBQVEsR0FBRyxDQUFDO1FBQUEsQ0FBUTtRQUFFLFFBQVE7SUFBQSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUc7SUFFeEMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsTUFBTSxDQUFVLFdBQzdDLElBQUksR0FBRyxDQUFDO1FBQUEsSUFBSTtJQUFBLENBQUM7SUFHZixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBSyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUUsR0FBSyxDQUFDO1lBQzVDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGdDQUFVLENBQUMsRUFBRTtRQUNuQyxDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVO0FBQ25CLENBQUMiLCJzb3VyY2VzIjpbInNyYy9kcXVlcnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgRFF1ZXJ5Tm9kZSB7XG4gIC8qKlxuICAgKiBEUXVlcnlOb2RlIHdyYXBzIERPTSBFbGVtZW50IG9iamVjdHMgd2l0aCBlbmhhbmNlZCBmdW5jdGlvbmFsaXR5LlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgQSBET00gRWxlbWVudCBvYmplY3QsIHdoaWNoIHJlcHJlc2VudHMgYW4gSFRNTCB0YWcuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihub2RlKSB7XG4gICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB1bmRlcmx5aW5nIG5hdGl2ZSBET00gRWxlbWVudCBvYmplY3QuXG4gICAqXG4gICAqIEByZXR1cm5zIEVsZW1lbnRcbiAgICovXG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG5lYXJlc3QgYW5jZXN0b3Igd2hpY2ggbWF0Y2hlcyBhIHNlbGVjdG9yLiBJZiBubyBzZWxlY3RvciBpc1xuICAgKiBnaXZlbiwgcmV0dXJucyBwYXJlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciAoT3B0aW9uYWwpIENTUyBzZWxlY3RvciB0byBtYXRjaCwgaWYgYW55LlxuICAgKiBAcmV0dXJucyBEUXVlcnlOb2RlXG4gICAqL1xuICBhbmNlc3RvcihzZWxlY3Rvcikge1xuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgfHwgJyc7XG5cbiAgICBpZiAoc2VsZWN0b3IgPT09ICcnKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERRdWVyeU5vZGUodGhpcy5ub2RlLmNsb3Nlc3Qoc2VsZWN0b3IpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBpbW1lZGlhdGUgcGFyZW50IGVsZW1lbnQuXG4gICAqXG4gICAqIEByZXR1cm5zIERRdWVyeU5vZGVcbiAgICovXG4gIHBhcmVudCgpIHtcbiAgICBpZiAoIXRoaXMubm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERRdWVyeU5vZGUodGhpcy5ub2RlLnBhcmVudE5vZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYWxsIGRlc2NlbmRhbnRzIHdoaWNoIG1hdGNoIGEgc2VsZWN0b3IuIElmIG5vIHNlbGVjdG9yIGlzIGdpdmVuLFxuICAgKiByZXR1cm5zIGNoaWxkcmVuLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgKE9wdGlvbmFsKSBDU1Mgc2VsZWN0b3IgdG8gbWF0Y2gsIGlmIGFueS5cbiAgICogQHJldHVybnMgRFF1ZXJ5XG4gICAqL1xuICBkZXNjZW5kYW50cyhzZWxlY3Rvcikge1xuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgfHwgJyc7XG5cbiAgICBpZiAoc2VsZWN0b3IgPT09ICcnKSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbigpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRFF1ZXJ5KHNlbGVjdG9yLCB0aGlzLm5vZGUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhbGwgaW1tZWRpYXRlIGNoaWxkcmVuIHdoaWNoIG1hdGNoIGEgc2VsZWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciAoT3B0aW9uYWwpIENTUyBzZWxlY3RvciB0byBtYXRjaCwgaWYgYW55LlxuICAgKiBAcmV0dXJucyBbXURRdWVyeU5vZGVcbiAgICovXG4gIGNoaWxkcmVuKHNlbGVjdG9yKSB7XG4gICAgc2VsZWN0b3IgPSBzZWxlY3RvciB8fCAnJztcblxuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMubm9kZS5jaGlsZE5vZGVzKS5cbiAgICAgIGZpbHRlcihlID0+IGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKS5cbiAgICAgIGZpbHRlcihlID0+IChzZWxlY3RvciAhPT0gJycgJiYgZS5tYXRjaGVzKHNlbGVjdG9yKSkgfHwgKHNlbGVjdG9yID09PSAnJykpLlxuICAgICAgbWFwKGUgPT4gbmV3IERRdWVyeU5vZGUoZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYWxsIHNpYmxpbmcgZWxlbWVudHMgb2YgdGhlIGltbWVkaWF0ZSBwYXJlbnQgd2hpY2ggbWF0Y2ggYSBzZWxlY3Rvci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIChPcHRpb25hbCkgQ1NTIHNlbGVjdG9yIHRvIG1hdGNoLCBpZiBhbnkuXG4gICAqIEByZXR1cm5zIFtdRFF1ZXJ5Tm9kZVxuICAgKi9cbiAgc2libGluZ3Moc2VsZWN0b3IpIHtcbiAgICBzZWxlY3RvciA9IHNlbGVjdG9yIHx8ICcnO1xuXG4gICAgaWYgKCF0aGlzLm5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGxldCBzaWJsaW5nID0gdGhpcy5ub2RlLnBhcmVudE5vZGUuZmlyc3RDaGlsZDtcbiAgICBjb25zdCBzaWJsaW5ncyA9IFtdO1xuXG4gICAgd2hpbGUgKHNpYmxpbmcpIHtcbiAgICAgIGlmIChzaWJsaW5nICE9PSB0aGlzLm5vZGUpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHNpYmxpbmcubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFXG4gICAgICAgICAgJiYgKFxuICAgICAgICAgICAgKHNlbGVjdG9yICE9PSAnJyAmJiBzaWJsaW5nLm1hdGNoZXMoc2VsZWN0b3IpKVxuICAgICAgICAgICAgfHwgKHNlbGVjdG9yID09PSAnJylcbiAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgIHNpYmxpbmdzLnB1c2gobmV3IERRdWVyeU5vZGUoc2libGluZykpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNpYmxpbmcgPSBzaWJsaW5nLm5leHRTaWJsaW5nO1xuICAgIH1cblxuICAgIHJldHVybiBzaWJsaW5ncztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBpbW1lZGlhdGVseS1uZXh0IHNpYmxpbmcgd2hpY2ggbWF0Y2hlcyBhIHNlbGVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgKE9wdGlvbmFsKSBDU1Mgc2VsZWN0b3IgdG8gbWF0Y2gsIGlmIGFueS5cbiAgICogQHJldHVybnMgRFF1ZXJ5Tm9kZVxuICAgKi9cbiAgbmV4dChzZWxlY3Rvcikge1xuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgfHwgJyc7XG4gICAgbGV0IG5leHQgPSB0aGlzLm5vZGUubmV4dFNpYmxpbmc7XG5cbiAgICB3aGlsZSAobmV4dCkge1xuICAgICAgaWYgKFxuICAgICAgICBuZXh0Lm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERVxuICAgICAgICAmJiAoXG4gICAgICAgICAgKHNlbGVjdG9yICE9PSAnJyAmJiBuZXh0Lm1hdGNoZXMoc2VsZWN0b3IpKVxuICAgICAgICAgIHx8IChzZWxlY3RvciA9PT0gJycpXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gbmV3IERRdWVyeU5vZGUobmV4dCk7XG4gICAgICB9XG5cbiAgICAgIG5leHQgPSBuZXh0Lm5leHRTaWJsaW5nO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGltbWVkaWF0ZWx5LXByZXZpb3VzIHNpYmxpbmcgd2hpY2ggbWF0Y2hlcyBhIHNlbGVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgKE9wdGlvbmFsKSBDU1Mgc2VsZWN0b3IgdG8gbWF0Y2gsIGlmIGFueS5cbiAgICogQHJldHVybnMgRFF1ZXJ5Tm9kZVxuICAgKi9cbiAgcHJldihzZWxlY3Rvcikge1xuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgfHwgJyc7XG4gICAgbGV0IHByZXYgPSB0aGlzLm5vZGUucHJldmlvdXNTaWJsaW5nO1xuXG4gICAgd2hpbGUgKHByZXYpIHtcbiAgICAgIGlmIChcbiAgICAgICAgcHJldi5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREVcbiAgICAgICAgJiYgKFxuICAgICAgICAgIChzZWxlY3RvciAhPT0gJycgJiYgcHJldi5tYXRjaGVzKHNlbGVjdG9yKSlcbiAgICAgICAgICB8fCAoc2VsZWN0b3IgPT09ICcnKVxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEUXVlcnlOb2RlKHByZXYpO1xuICAgICAgfVxuXG4gICAgICBwcmV2ID0gcHJldi5wcmV2aW91c1NpYmxpbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUHJlcGVuZHMgdGhlIHByb3ZpZGVkIGVsZW1lbnQgdG8gdGhlIHNlbGVjdGVkIG5vZGUsIHRoZW4gcmV0dXJucyBhIHBvaW50ZXJcbiAgICogdG8gdGhlIHByZXBlbmRlZCBub2RlIGluIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAoUmVxdWlyZWQpIFRoZSBET00gZWxlbWVudCB0byBwcmVwZW5kLlxuICAgKiBAcmV0dXJucyBEUXVlcnlOb2RlXG4gICAqL1xuICBwcmVwZW5kKGVsZW1lbnQpIHtcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQuZG9tICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5ub2RlLmluc2VydEFkamFjZW50RWxlbWVudCgnYWZ0ZXJiZWdpbicsIGVsZW1lbnQuZG9tKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5vZGUuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmJlZ2luJywgZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEUXVlcnlOb2RlKHRoaXMubm9kZS5jaGlsZE5vZGVzWzBdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmRzIHRoZSBwcm92aWRlZCBlbGVtZW50IHRvIHRoZSBzZWxlY3RlZCBub2RlLCB0aGVuIHJldHVybnMgYSBwb2ludGVyXG4gICAqIHRvIHRoZSBhcHBlbmRlZCBub2RlIGluIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAoUmVxdWlyZWQpIFRoZSBET00gZWxlbWVudCB0byBhcHBlbmQuXG4gICAqIEByZXR1cm5zIERRdWVyeU5vZGVcbiAgICovXG4gIGFwcGVuZChlbGVtZW50KSB7XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50LmRvbSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMubm9kZS5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2JlZm9yZWVuZCcsIGVsZW1lbnQuZG9tKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5vZGUuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdiZWZvcmVlbmQnLCBlbGVtZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERRdWVyeU5vZGUoXG4gICAgICB0aGlzLm5vZGUuY2hpbGROb2Rlc1t0aGlzLm5vZGUuY2hpbGROb2Rlcy5sZW5ndGggLSAxXSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydHMgdGhlIHByb3ZpZGVkIGVsZW1lbnQgYmVmb3JlIHRoZSBzZWxlY3RlZCBub2RlLCB0aGVuIHJldHVybnMgYVxuICAgKiBwb2ludGVyIHRvIHRoZSBhZGRlZCBub2RlIGluIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAoUmVxdWlyZWQpIFRoZSBET00gZWxlbWVudCB0byBpbnNlcnQgYmVmb3JlLlxuICAgKiBAcmV0dXJucyBEUXVlcnlOb2RlXG4gICAqL1xuICBiZWZvcmUoZWxlbWVudCkge1xuICAgIGlmICh0eXBlb2YgZWxlbWVudC5kb20gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm5vZGUuYmVmb3JlKGVsZW1lbnQuZG9tKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5vZGUuYmVmb3JlKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnByZXYoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNlcnRzIHRoZSBwcm92aWRlZCBlbGVtZW50IGFmdGVyIHRoZSBzZWxlY3RlZCBub2RlLCB0aGVuIHJldHVybnMgYVxuICAgKiBwb2ludGVyIHRvIHRoZSBhZGRlZCBub2RlIGluIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAoUmVxdWlyZWQpIFRoZSBET00gZWxlbWVudCB0byBpbnNlcnQgYWZ0ZXIuXG4gICAqIEByZXR1cm5zIERRdWVyeU5vZGVcbiAgICovXG4gIGFmdGVyKGVsZW1lbnQpIHtcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQuZG9tICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5ub2RlLmFmdGVyKGVsZW1lbnQuZG9tKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5vZGUuYWZ0ZXIoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubmV4dCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgd3JhcHBlciBmb3IgYWRkRXZlbnRMaXN0ZW5lciB3aXRoIGBvbmNlOiBmYWxzZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIEEgdmFsaWQgZXZlbnQgdHlwZSwgbGlrZSBgY2xpY2tgLiBTZWVcbiAgICogICAgIDxodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9FdmVudHM+IG9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9ufERlbGVnYXRlfSBmbiBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGV4ZWN1dGUsIG9yIGEgc3RyaW5nXG4gICAqICAgICBjb250YWluaW5nIHRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbi5cbiAgICogQHJldHVybnMgRXZlbnRQb2ludGVyXG4gICAqL1xuICBvbih0eXBlLCBmbikge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLm5vZGU7XG5cbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIHtvbmNlOiBmYWxzZX0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwge29uY2U6IGZhbHNlfSk7XG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEUXVlcnkgPSBmdW5jdGlvbihzZWxlY3RvciwgZWxlbSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gIGlmIChzZWxlY3RvciBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICByZXR1cm4gbmV3IERRdWVyeU5vZGUoc2VsZWN0b3IpO1xuICB9XG5cbiAgY29uc3QgY29sbGVjdGlvbiA9IFtdO1xuXG4gIGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuICBpZiAoZWxlbSA9PT0gZG9jdW1lbnQpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKS5mb3JFYWNoKChlZSkgPT4ge1xuICAgICAgY29sbGVjdGlvbi5wdXNoKG5ldyBEUXVlcnlOb2RlKGVlKSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgfVxuXG4gIHNlbGVjdG9yID0gWyc6c2NvcGUnLCBzZWxlY3Rvcl0uam9pbignICcpO1xuXG4gIGlmICh0eXBlb2YgZWxlbVtTeW1ib2wuaXRlcmF0b3JdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgZWxlbSA9IFtlbGVtXTtcbiAgfVxuXG4gIGVsZW0uZm9yRWFjaCgoZSkgPT4ge1xuICAgIGUucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikuZm9yRWFjaCgoZWUpID0+IHtcbiAgICAgIGNvbGxlY3Rpb24ucHVzaChuZXcgRFF1ZXJ5Tm9kZShlZSkpO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gY29sbGVjdGlvbjtcbn07XG4iXSwibmFtZXMiOltdLCJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9kaXN0L2RxdWVyeS5qcy5tYXAifQ=="],"names":[],"version":3,"file":"dquery.js.map","sourceRoot":"../"}