{"mappings":"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","sources":["dist/dquery.js"],"sourcesContent":["function $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $d06b2385a2707aa5$export$2e2bcd8739ae039);\n// ## DQueryNode\n//\n// `DQueryNode` is a private class. Not exposed to the public.\n//\n// Individual elements are wrapped in a `DQueryNode` object. This allows us to\n// extend the functionality. You won't use this directly, but rather as the\n// result of using `DQuery` to discover results.\n/**\n * Individual elements are wrapped in a `DQueryNode` object. This allows us to\n * extend the functionality. You won't use this directly, but rather as the\n * result of using DQuery to discover results.\n *\n * @param {Element} node (Required) A DOM `Element` object. See\n *     <https://developer.mozilla.org/en-US/docs/Web/API/Element> for more\n *     information.\n * @private\n */ class $d06b2385a2707aa5$var$DQueryNode {\n    /**\n   * DQueryNode wraps DOM Element objects with enhanced functionality.\n   *\n   * @param {Element} node A DOM Element object, which represents an HTML tag.\n   */ constructor(node){\n        this.node = node;\n    }\n    // ----\n    // ### Querying/Traversing the DOM tree\n    // **Example:**\n    //\n    // ```javascript\n    // $('query')[0].get();\n    // $(document.body).get();\n    // ```\n    /**\n   * Gets the underlying native DOM Element object.\n   *\n   * @returns Element\n   */ get() {\n        return this.node;\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $('query').ancestor('.example').get();\n    // $('query').ancestor().get(); // ← No selector == parent.\n    // ```\n    /**\n   * Gets the nearest ancestor which matches a selector. If no selector is\n   * given, returns parent.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ ancestor(selector) {\n        selector = selector || '';\n        if (selector === '') return this.parent();\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.closest(selector));\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $('query').parent().get();\n    // ```\n    /**\n   * Gets the immediate parent element.\n   *\n   * @returns DQueryNode\n   */ parent() {\n        if (!this.node.parentNode) return null;\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.parentNode);\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $('query').descendants('.example')[0].get();\n    // $('query').descendants(); // ← No selector == children.\n    // ```\n    /**\n   * Gets all descendants which match a selector. If no selector is given,\n   * returns children.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQuery\n   */ descendants(selector) {\n        selector = selector || '';\n        if (selector === '') return this.children();\n        return new $d06b2385a2707aa5$var$DQuery(selector, this.node); // eslint-disable-line no-undef\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $('query').children(); // ← All direct children.\n    // $('query').children('.example');\n    // ```\n    /**\n   * Gets all immediate child HTML elements which match a selector. Excludes\n   * whitespace nodes, comment nodes, etc.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns []DQueryNode\n   */ children(selector) {\n        selector = selector || '';\n        return Array.from(this.node.childNodes).filter((e)=>e.nodeType === Node.ELEMENT_NODE\n        ).filter((e)=>selector !== '' && e.matches(selector) || selector === ''\n        ).map((e)=>new $d06b2385a2707aa5$var$DQueryNode(e)\n        );\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $('query').siblings().forEach($e => {\n    //   return $e.remove('enabled')\n    // })\n    // ```\n    /**\n   * Gets all sibling HTML elements of the immediate parent which match a\n   * selector. Excludes self, whitespace nodes, comment nodes, etc.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns []DQueryNode\n   */ siblings(selector) {\n        selector = selector || '';\n        if (!this.node.parentNode) return [];\n        let sibling = this.node.parentNode.firstChild;\n        const siblings = [];\n        while(sibling){\n            if (sibling !== this.node) {\n                if (sibling.nodeType === Node.ELEMENT_NODE && (selector !== '' && sibling.matches(selector) || selector === '')) siblings.push(new $d06b2385a2707aa5$var$DQueryNode(sibling));\n            }\n            sibling = sibling.nextSibling;\n        }\n        return siblings;\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // const start = $('query')[0];\n    // while (start.next() != null) {\n    //   console.debug(start.next());\n    //   start = start.next();\n    // }\n    // ```\n    /**\n   * Gets the immediately-next sibling which matches a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ next(selector) {\n        selector = selector || '';\n        let next = this.node.nextSibling;\n        while(next){\n            if (next.nodeType === Node.ELEMENT_NODE && (selector !== '' && next.matches(selector) || selector === '')) return new $d06b2385a2707aa5$var$DQueryNode(next);\n            next = next.nextSibling;\n        }\n        return null;\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // const start = $('query')[0];\n    // while (start.prev() != null) {\n    //   console.debug(start.prev());\n    //   start = start.prev();\n    // }\n    // ```\n    /**\n   * Gets the immediately-previous sibling which matches a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ prev(selector) {\n        selector = selector || '';\n        let prev = this.node.previousSibling;\n        while(prev){\n            if (prev.nodeType === Node.ELEMENT_NODE && (selector !== '' && prev.matches(selector) || selector === '')) return new $d06b2385a2707aa5$var$DQueryNode(prev);\n            prev = prev.previousSibling;\n        }\n        return null;\n    }\n    // ----\n    // ### Injecting new DOM nodes\n    // **Example:**\n    //\n    // ```javascript\n    // $(document.body).prepend(\n    //   _('p#abc').h('This is my paragraph!')\n    // ).get();\n    // //=> HTMLParagraphElement\n    // ```\n    /**\n   * Prepends the provided element to the selected node, then returns a pointer\n   * to the prepended node in the DOM.\n   *\n   * @param {string|Element} element (Required) The DOM element or HTML string\n   *     to prepend.\n   * @returns DQueryNode\n   */ prepend(element) {\n        if ((typeof element).toLowerCase() === 'string') this.node.insertAdjacentHTML('afterbegin', element);\n        else if (typeof element.dom !== 'undefined') this.node.insertAdjacentElement('afterbegin', element.dom());\n        else this.node.insertAdjacentElement('afterbegin', element);\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.childNodes[0]);\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $(document.body).append(\n    //   _('p#abc').h('This is my paragraph!')\n    // ).get();\n    // //=> HTMLParagraphElement\n    // ```\n    /**\n   * Appends the provided element to the selected node, then returns a pointer\n   * to the appended node in the DOM.\n   *\n   * @param {string|Element} element (Required) The DOM element or HTML string\n   *     to append.\n   * @returns DQueryNode\n   */ append(element) {\n        if ((typeof element).toLowerCase() === 'string') this.node.insertAdjacentHTML('beforeend', element);\n        else if (typeof element.dom !== 'undefined') this.node.insertAdjacentElement('beforeend', element.dom());\n        else this.node.insertAdjacentElement('beforeend', element);\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.childNodes[this.node.childNodes.length - 1]);\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $(document.body).children()[0].before(\n    //   _('p#abc').h('This is my paragraph!')\n    // ).get();\n    // //=> HTMLParagraphElement\n    // ```\n    /**\n   * Inserts the provided element before the selected node, then returns a\n   * pointer to the added node in the DOM.\n   *\n   * @param {string|Element} element (Required) The DOM element or HTML string\n   *     to insert before.\n   * @returns DQueryNode\n   */ before(element) {\n        if (typeof element.dom !== 'undefined') this.node.before(element.dom());\n        else this.node.before(element);\n        return this.prev();\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $(document.body).children()[0].after(\n    //   _('p#abc').h('This is my paragraph!')\n    // ).get();\n    // //=> HTMLParagraphElement\n    // ```\n    /**\n   * Inserts the provided element after the selected node, then returns a\n   * pointer to the added node in the DOM.\n   *\n   * @param {string|Element} element (Required) The DOM element or HTML string\n   *     to insert after.\n   * @returns DQueryNode\n   */ after(element) {\n        if (typeof element.dom !== 'undefined') this.node.after(element.dom());\n        else this.node.after(element);\n        return this.next();\n    }\n    // ----\n    // ### Managing classnames\n    // **Example:**\n    //\n    // ```javascript\n    // $('query')[0].classes();\n    // //=> DOMTokenList\n    // ```\n    /**\n   * Returns the list of classnames currently applied to the element.\n   *\n   * @returns DOMTokenList\n   */ classes() {\n        const node = this.node;\n        return node.classList;\n    }\n    // **Example:**\n    //\n    // ```html\n    // <body class=\"abc def ghi\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).has('abc');\n    // //=> true\n    //\n    // $(document.body).has('def');\n    // //=> true\n    //\n    // $(document.body).has('xyz');\n    // //=> false\n    // ```\n    /**\n   * Determines whether or not the element has the specified classname applied.\n   *\n   * @param {string} klass (Required) The classname to check on the element.\n   * @returns bool\n   */ has(klass) {\n        const node = this.node;\n        return node.classList.contains(klass);\n    }\n    // **Example:**\n    //\n    // ```html\n    // Before: <body class=\"abc\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).add('def');\n    // ```\n    //\n    // ```html\n    // After: <body class=\"abc def\">\n    // ```\n    /**\n   * Adds the specified classname to the element.\n   *\n   * @param {string} klass (Required) The classname to add to the element.\n   * @returns bool\n   */ add(klass) {\n        const node = this.node;\n        return node.classList.add(klass);\n    }\n    // **Example:**\n    //\n    // ```html\n    // Before: <body class=\"abc def\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).remove('def');\n    // ```\n    //\n    // ```html\n    // After: <body class=\"abc\">\n    // ```\n    /**\n   * Removes the specified classname to the element.\n   *\n   * @param {string} klass (Required) The classname to remove from the element.\n   * @returns bool\n   */ remove(klass) {\n        const node = this.node;\n        return node.classList.remove(klass);\n    }\n    // **Example:**\n    //\n    // ```html\n    // Before: <body class=\"abc\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).replace('abc', 'xyz');\n    // ```\n    //\n    // ```html\n    // After: <body class=\"xyz\">\n    // ```\n    /**\n   * Replaces the specified classname on the element with another classname.\n   *\n   * @param {string} klass1 (Required) The classname to remove from the element.\n   * @param {string} klass2 (Required) The classname to add to the element.\n   * @returns bool\n   */ replace(klass1, klass2) {\n        const node = this.node;\n        return node.classList.replace(klass1, klass2);\n    }\n    // **Example:**\n    //\n    // ```html\n    // Before: <body class=\"abc def\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).toggle('def');\n    // ```\n    //\n    // ```html\n    // After: <body class=\"abc\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).toggle('def');\n    // ```\n    //\n    // ```html\n    // After-After: <body class=\"abc def\">\n    // ```\n    /**\n   * Toggles a classname on the element. Returns a boolean value, `true` or\n   * `false`, indicating whether or not `klass` is in the list of classnames\n   * after the call or not.\n   *\n   * @param {string} klass (Required) The classname to toggle on the element.\n   * @returns bool\n   */ toggle(klass) {\n        const node = this.node;\n        return node.classList.toggle(klass);\n    }\n    // ----\n    // ### Events\n    // **Example:**\n    //\n    // ```javascript\n    // const dlg = Delegate;\n    //\n    // // Add event\n    // const evt = $(document.body).on('click',\n    //   dlg('.example', evt => {\n    //     $(evt.target).toggle('enabled')\n    //   })\n    // );\n    //\n    // // Remove event\n    // evt.remove();\n    // ```\n    /**\n   * A wrapper for addEventListener with `once: false`.\n   *\n   * @param {string} type A valid event type, like `click`. See\n   *     <https://developer.mozilla.org/en-US/docs/Web/Events> for more\n   *     information.\n   * @param {string|function|Delegate} fn A callback function to execute, or a\n   *     string containing the name of the function.\n   * @returns EventPointer\n   */ on(type, fn) {\n        const node = this.node;\n        node.addEventListener(type, fn, {\n            once: false\n        });\n        return {\n            remove: function() {\n                node.removeEventListener(type, fn, {\n                    once: false\n                });\n            }\n        };\n    }\n}\n// ----\n// ## DQuery\n//\n// Main interface for DQuery.\n/**\n * Main interface for DQuery.\n *\n * Fundamentally, `DQuery` is a wrapper around `querySelectorAll()`, except that\n * the matches are also wrapped with `DQueryNode`. This allows us to extend the\n * functionality.\n *\n * @param {string|Element} selector (Required) Either a (string) CSS selector\n *     (which will always result in an array of `DQueryNode` objects), or a DOM\n *     `Element` object (which will always result in a single `DQueryNode`\n *     element). See <https://developer.mozilla.org/en-US/docs/Web/API/Element>\n *     for more information.\n * @param {Element} elem (Optional) a DOM `Element` object which should be used\n *     as the parent-most element for the query. See\n *     <https://developer.mozilla.org/en-US/docs/Web/API/Element> for more\n *     information. The default value is `document`, which resolves to the\n *     `<html>` element.\n * @returns []DQueryNode|DQueryNode\n */ function $d06b2385a2707aa5$var$DQuery(selector, elem) {\n    // If we received a DOM `Element` object, just wrap it and return it.\n    if (selector instanceof Element) return new $d06b2385a2707aa5$var$DQueryNode(selector);\n    // If the `elem` parameter is not provided, use `document` (`<html>`)as the\n    // default root element for the query. Take the results, wrap each one with\n    // `DQueryNode`, and return the collection.\n    const collection = [];\n    elem = elem || document;\n    if (elem === document) {\n        document.querySelectorAll(selector).forEach((ee)=>{\n            collection.push(new $d06b2385a2707aa5$var$DQueryNode(ee));\n        });\n        return collection;\n    }\n    // If the `elem` parameter _is_ provided (which _may_ be an array of results),\n    // iterate over each of the results, then use `:scope` in the selector to\n    // filter to only children of `elem` (as opposed to `document`). This will\n    // give us the results we expect instead of too many results.\n    selector = [\n        ':scope',\n        selector\n    ].join(' ');\n    if (typeof elem[Symbol.iterator] !== 'function') elem = [\n        elem\n    ];\n    elem.forEach((e)=>{\n        e.querySelectorAll(selector).forEach((ee)=>{\n            collection.push(new $d06b2385a2707aa5$var$DQueryNode(ee));\n        });\n    });\n    return collection;\n}\nvar // Default export for the package.\n$d06b2385a2707aa5$export$2e2bcd8739ae039 = $d06b2385a2707aa5$var$DQuery;\n\n\n//# sourceMappingURL=dquery.js.map\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,data:application/json;charset=utf-8;base64,"],"names":[],"version":3,"file":"dquery.js.map","sourceRoot":"../"}