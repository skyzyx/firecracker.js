{"mappings":"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","sources":["dist/dquery.js"],"sourcesContent":["function $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $d06b2385a2707aa5$export$2e2bcd8739ae039);\nclass $d06b2385a2707aa5$var$DQueryNode {\n    /**\n   * DQueryNode wraps DOM Element objects with enhanced functionality.\n   *\n   * @param {Element} node A DOM Element object, which represents an HTML tag.\n   */ constructor(node){\n        this.node = node;\n    }\n    /**\n   * Gets the underlying native DOM Element object.\n   *\n   * @returns Element\n   */ get() {\n        return this.node;\n    }\n    /**\n   * Gets the nearest ancestor which matches a selector. If no selector is\n   * given, returns parent.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ ancestor(selector) {\n        selector = selector || '';\n        if (selector === '') return this.parent();\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.closest(selector));\n    }\n    /**\n   * Gets the immediate parent element.\n   *\n   * @returns DQueryNode\n   */ parent() {\n        if (!this.node.parentNode) return null;\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.parentNode);\n    }\n    /**\n   * Gets all descendants which match a selector. If no selector is given,\n   * returns children.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQuery\n   */ descendants(selector) {\n        selector = selector || '';\n        if (selector === '') return this.children();\n        return new $d06b2385a2707aa5$var$DQuery(selector, this.node); // eslint-disable-line no-undef\n    }\n    /**\n   * Gets all immediate children which match a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns []DQueryNode\n   */ children(selector) {\n        selector = selector || '';\n        return Array.from(this.node.childNodes).filter((e)=>e.nodeType === Node.ELEMENT_NODE\n        ).filter((e)=>selector !== '' && e.matches(selector) || selector === ''\n        ).map((e)=>new $d06b2385a2707aa5$var$DQueryNode(e)\n        );\n    }\n    /**\n   * Gets all sibling elements of the immediate parent which match a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns []DQueryNode\n   */ siblings(selector) {\n        selector = selector || '';\n        if (!this.node.parentNode) return [];\n        let sibling = this.node.parentNode.firstChild;\n        const siblings = [];\n        while(sibling){\n            if (sibling !== this.node) {\n                if (sibling.nodeType === Node.ELEMENT_NODE && (selector !== '' && sibling.matches(selector) || selector === '')) siblings.push(new $d06b2385a2707aa5$var$DQueryNode(sibling));\n            }\n            sibling = sibling.nextSibling;\n        }\n        return siblings;\n    }\n    /**\n   * Gets the immediately-next sibling which matches a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ next(selector) {\n        selector = selector || '';\n        let next = this.node.nextSibling;\n        while(next){\n            if (next.nodeType === Node.ELEMENT_NODE && (selector !== '' && next.matches(selector) || selector === '')) return new $d06b2385a2707aa5$var$DQueryNode(next);\n            next = next.nextSibling;\n        }\n        return null;\n    }\n    /**\n   * Gets the immediately-previous sibling which matches a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ prev(selector) {\n        selector = selector || '';\n        let prev = this.node.previousSibling;\n        while(prev){\n            if (prev.nodeType === Node.ELEMENT_NODE && (selector !== '' && prev.matches(selector) || selector === '')) return new $d06b2385a2707aa5$var$DQueryNode(prev);\n            prev = prev.previousSibling;\n        }\n        return null;\n    }\n    /**\n   * Prepends the provided element to the selected node, then returns a pointer\n   * to the prepended node in the DOM.\n   *\n   * @param {Element} element (Required) The DOM element to prepend.\n   * @returns DQueryNode\n   */ prepend(element) {\n        if (typeof element.dom !== 'undefined') this.node.insertAdjacentElement('afterbegin', element.dom());\n        else this.node.insertAdjacentElement('afterbegin', element);\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.childNodes[0]);\n    }\n    /**\n   * Appends the provided element to the selected node, then returns a pointer\n   * to the appended node in the DOM.\n   *\n   * @param {Element} element (Required) The DOM element to append.\n   * @returns DQueryNode\n   */ append(element) {\n        if (typeof element.dom !== 'undefined') this.node.insertAdjacentElement('beforeend', element.dom());\n        else this.node.insertAdjacentElement('beforeend', element);\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.childNodes[this.node.childNodes.length - 1]);\n    }\n    /**\n   * Inserts the provided element before the selected node, then returns a\n   * pointer to the added node in the DOM.\n   *\n   * @param {Element} element (Required) The DOM element to insert before.\n   * @returns DQueryNode\n   */ before(element) {\n        if (typeof element.dom !== 'undefined') this.node.before(element.dom());\n        else this.node.before(element);\n        return this.prev();\n    }\n    /**\n   * Inserts the provided element after the selected node, then returns a\n   * pointer to the added node in the DOM.\n   *\n   * @param {Element} element (Required) The DOM element to insert after.\n   * @returns DQueryNode\n   */ after(element) {\n        if (typeof element.dom !== 'undefined') this.node.after(element.dom());\n        else this.node.after(element);\n        return this.next();\n    }\n    /**\n   * Toggles a classname on the element. Returns a boolean value, `true` or\n   * `false`, indicating whether or not `klass` is in the list of classnames\n   * after the call or not.\n   *\n   * @param {string} klass (Required) The classname to toggle on the element.\n   * @returns bool\n   */ toggle(klass) {\n        const node = this.node;\n        node.classList.toggle(klass);\n    }\n    /**\n   * A wrapper for addEventListener with `once: false`.\n   *\n   * @param {string} type A valid event type, like `click`. See\n   *     <https://developer.mozilla.org/en-US/docs/Web/Events> or more information.\n   * @param {string|function|Delegate} fn A callback function to execute, or a string\n   *     containing the name of the function.\n   * @returns EventPointer\n   */ on(type, fn) {\n        const node = this.node;\n        node.addEventListener(type, fn, {\n            once: false\n        });\n        return {\n            remove: function() {\n                node.removeEventListener(type, fn, {\n                    once: false\n                });\n            }\n        };\n    }\n}\nfunction $d06b2385a2707aa5$var$DQuery(selector, elem) {\n    if (selector instanceof Element) return new $d06b2385a2707aa5$var$DQueryNode(selector);\n    const collection = [];\n    elem = elem || document;\n    if (elem === document) {\n        document.querySelectorAll(selector).forEach((ee)=>{\n            collection.push(new $d06b2385a2707aa5$var$DQueryNode(ee));\n        });\n        return collection;\n    }\n    selector = [\n        ':scope',\n        selector\n    ].join(' ');\n    if (typeof elem[Symbol.iterator] !== 'function') elem = [\n        elem\n    ];\n    elem.forEach((e)=>{\n        e.querySelectorAll(selector).forEach((ee)=>{\n            collection.push(new $d06b2385a2707aa5$var$DQueryNode(ee));\n        });\n    });\n    return collection;\n}\nvar $d06b2385a2707aa5$export$2e2bcd8739ae039 = $d06b2385a2707aa5$var$DQuery;\n\n\n//# sourceMappingURL=dquery.js.map\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,data:application/json;charset=utf-8;base64,"],"names":[],"version":3,"file":"dquery.js.map","sourceRoot":"../"}