{"mappings":"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","sources":["dist/vdom.js"],"sourcesContent":["function $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $d0e0ac82cf77fdb6$export$2e2bcd8739ae039);\n// VDOM is an updated ES6+ version of a Virtual DOM implementation I built in\n// 2008 before Virtual DOM even had a name yet.\n//\n// The term “Virtual DOM” refers to real DOM nodes that exist in memory, but are\n// not attached to the _live_ tree. This means that they can be modified and\n// manipulated in-memory without triggering repaints and reflows in the browser\n// engine, making modifications dramatically faster.\n//\n// By leveraging `DocumentFragment` objects under the hood, we can collect one\n// or more sibling elements together which do not have a shared parent node\n// until they are injected into the live DOM. This is fundamentally the same way\n// that `React.createElement()` works, and the syntax is very similar.\n//\n// **Examples:**\n//\n// From the <https://reactjs.org> homepage, this example generates a new DOM\n// element and appends it to the live DOM.\n//\n// ```javascript\n// class HelloMessage extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//         Hello {this.props.name}\n//       </div>\n//     );\n//     // or...\n//     // return React.createElement(\n//     //   \"div\",\n//     //   null,\n//     //   \"Hello \",\n//     //   this.props.name\n//     // );\n//   }\n// }\n//\n// ReactDOM.render(\n//   React.createElement(\n//     HelloMessage, { name: \"Taylor\" }\n//   ),\n//   document.getElementById('hello-example')\n// );\n// ```\n//\n// Here's a (roughly) equivalent example using VDOM, except that there are no\n// _magical_ `props` because there are no `components`. Just standard functions\n// and variables.\n//\n// ```javascript\n// const _ = VDOM,\n//       $ = DQuery;\n//\n// function HelloMessage(props) {\n//   return `\n//     <div>\n//       Hello ${props.name}\n//     </div>\n//   `;\n//   // or...\n//   // return _('div').h(`Hello ${props.name}`);\n// }\n//\n// $('#hello-example')[0].append(\n//   HelloMessage({ name: \"Taylor\" })\n// );\n// ```\n//\n// VDOM sits much “closer to the metal”, which makes it (a) faster, and (b)\n// smaller. While it lacks some of the niceties like JSX, you can still use\n// `innerHTML` which gets you _most_ of the way there at very little cost.\n//\n// ----\nconst $d0e0ac82cf77fdb6$var$X = function(elem, attr) {\n    const self = this, RE_ID_OR_CLASS = /[\\.#]/u, RE_CSS_ATTRS = /\\[([^\\]]+)\\]/gu, ARR_NEXT = 1;\n    let key, k, match;\n    attr = attr || {\n    };\n    // Parse the CSS-style notation.\n    function notation() {\n        const att = {\n            class: [],\n            id: ''\n        }, kvPair = [];\n        if (!RE_ID_OR_CLASS.test(elem) && !RE_CSS_ATTRS.test(elem)) return {\n        };\n        // Collect all of the `[k=v]` blocks.\n        while((match = RE_CSS_ATTRS.exec(elem)) !== null)kvPair.push(match[1].split('='));\n        elem = elem.replace(RE_CSS_ATTRS, '');\n        const pieces = elem.split(RE_ID_OR_CLASS), elemType = pieces.shift();\n        kvPair.forEach((val, idx, arr)=>{\n            att[arr[idx][0]] = arr[idx][1];\n        });\n        // Support CSS/jQuery-style notation for generating elements with IDs and classnames.\n        let pos = elemType.length;\n        const classes = att['class'];\n        pieces.forEach((val, idx, arr)=>{\n            if (elem[pos] === '#') att.id = val;\n            else classes.push(val);\n            pos += arr[idx].length + ARR_NEXT;\n        });\n        att['class'] = classes;\n        if (!att['class'].length) delete att['class'];\n        if (att['id'] === '') delete att['id'];\n        return att;\n    }\n    // Merge options into a conglomo-hash!\n    attr = Object.assign(attr, notation());\n    // Construct the element, loop through the list of attributes and add them to the node.\n    if (RE_ID_OR_CLASS.test(elem)) self.e = document.createElement(elem.split(RE_ID_OR_CLASS).shift());\n    else self.e = document.createElement(elem);\n    if (attr) {\n        for(key in attr)if (Object.prototype.hasOwnProperty.call(attr, key)) {\n            if (typeof attr[key] === 'object' && typeof attr[key].length === 'number' && typeof attr[key].splice === 'function') attr[key] = attr[key].join(' ');\n            if (key.toString() === 'class') self.e.className = attr[key];\n            else if (key.toString() === 'data') {\n                for(k in attr[key])if (Object.prototype.hasOwnProperty.call(attr[key], k)) self.e.setAttribute(`data-${k}`, attr[key][k]);\n            } else self.e.setAttribute(key, attr[key]);\n        }\n    }\n    // Handle child nodes.\n    self._ = (obj)=>{\n        // If the object isn't an array, convert it to an array to maintain a single codepath below.\n        if (!Array.isArray(obj)) obj = [\n            obj\n        ];\n        // Loop through the indexed array of children. If the node is a `VDOM` object, convert it to\n        // DOM and append it. Otherwise, assume it's a real DOM node.\n        for(let i = 0, max = obj.length; i < max; i++){\n            if (typeof obj[i] === 'undefined') break;\n            if (typeof obj[i].dom !== 'undefined') self.e.appendChild(obj[i].dom());\n            else self.e.appendChild(obj[i]);\n        }\n        return self;\n    };\n    // Set the HTML\n    self.h = (str, replace)=>{\n        // Determine the default value for `replace`.\n        replace = replace || false;\n        // Set the value with innerHTML.\n        if (replace) self.e.innerHTML = str;\n        else self.e.innerHTML += str;\n        return self;\n    };\n    // Set the text\n    self.t = (str)=>{\n        // No parameters? Read the value instead. Alias for __t().\n        if (typeof str === 'undefined') return self.__t();\n        // Set the value\n        const text = document.createTextNode(str);\n        self.e.appendChild(text);\n        return self;\n    };\n    // Get DOMElement\n    self.dom = ()=>self.e\n    ;\n    // Get as HTML\n    self.toString = ()=>{\n        const t = document.createElement('div');\n        t.appendChild(self.e);\n        return t.innerHTML;\n    };\n    // Get as text\n    self.__t = ()=>{\n        const t = document.createElement('div');\n        t.appendChild(self.e);\n        return t.textContent || t.innerText;\n    };\n    return self;\n}, // Pre-instantiate the class on each call so that you never need to use `new`.\n$d0e0ac82cf77fdb6$var$VDOM = (elem, attr)=>new $d0e0ac82cf77fdb6$var$X(elem, attr)\n; // eslint-disable-line no-undef\n$d0e0ac82cf77fdb6$var$VDOM.DOM = (...nodes)=>{\n    // Create a document fragment. Grab and loop through the in-memory DOM nodes,\n    // and _move_ them to the `DocumentFragment`.\n    const f = document.createDocumentFragment(), n = new $d0e0ac82cf77fdb6$var$X('div')._(nodes).dom().childNodes;\n    while(n.length)f.appendChild(n[0]);\n    return f;\n};\n$d0e0ac82cf77fdb6$var$VDOM.t = (str)=>document.createTextNode(str)\n; // eslint-disable-line no-undef\n$d0e0ac82cf77fdb6$var$VDOM.h = (str)=>{\n    const f = document.createDocumentFragment(), n = new $d0e0ac82cf77fdb6$var$X('div').h(str).dom().childNodes;\n    while(n.length)f.appendChild(n[0]);\n    return f;\n};\nvar // Default export for the package.\n$d0e0ac82cf77fdb6$export$2e2bcd8739ae039 = $d0e0ac82cf77fdb6$var$VDOM;\n\n\n//# sourceMappingURL=vdom.js.map\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,data:application/json;charset=utf-8;base64,"],"names":[],"version":3,"file":"vdom.js.map","sourceRoot":"../"}