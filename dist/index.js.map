{"mappings":"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","sources":["dist/index.js"],"sourcesContent":["function $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\n$parcel$export(module.exports, \"VERSION\", () => $690703a408b303b8$export$a4ad2735b021c132);\n$parcel$export(module.exports, \"DQuery\", () => $d06b2385a2707aa5$export$2e2bcd8739ae039);\n$parcel$export(module.exports, \"Delegate\", () => $2d9f69bafd62bfe5$export$2e2bcd8739ae039);\n$parcel$export(module.exports, \"VDOM\", () => $d0e0ac82cf77fdb6$export$2e2bcd8739ae039);\nvar $d06b2385a2707aa5$exports = {};\n\n$parcel$defineInteropFlag($d06b2385a2707aa5$exports);\n\n$parcel$export($d06b2385a2707aa5$exports, \"default\", () => $d06b2385a2707aa5$export$2e2bcd8739ae039);\n// ## DQueryNode\n//\n// `DQueryNode` is a private class. Not exposed to the public.\n//\n// Individual elements are wrapped in a `DQueryNode` object. This allows us to\n// extend the functionality. You won't use this directly, but rather as the\n// result of using `DQuery` to discover results.\n/**\n * Individual elements are wrapped in a `DQueryNode` object. This allows us to\n * extend the functionality. You won't use this directly, but rather as the\n * result of using DQuery to discover results.\n *\n * @param {Element} node (Required) A DOM `Element` object. See\n *     <https://developer.mozilla.org/en-US/docs/Web/API/Element> for more\n *     information.\n * @private\n */ class $d06b2385a2707aa5$var$DQueryNode {\n    /**\n   * DQueryNode wraps DOM Element objects with enhanced functionality.\n   *\n   * @param {Element} node A DOM Element object, which represents an HTML tag.\n   */ constructor(node){\n        this.node = node;\n    }\n    // ----\n    // ### Querying/Traversing the DOM tree\n    // **Example:**\n    //\n    // ```javascript\n    // $('query')[0].get();\n    // $(document.body).get();\n    // ```\n    /**\n   * Gets the underlying native DOM Element object.\n   *\n   * @returns Element\n   */ get() {\n        return this.node;\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $('query').ancestor('.example').get();\n    // $('query').ancestor().get(); // ← No selector == parent.\n    // ```\n    /**\n   * Gets the nearest ancestor which matches a selector. If no selector is\n   * given, returns parent.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ ancestor(selector) {\n        selector = selector || '';\n        if (selector === '') return this.parent();\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.closest(selector));\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $('query').parent().get();\n    // ```\n    /**\n   * Gets the immediate parent element.\n   *\n   * @returns DQueryNode\n   */ parent() {\n        if (!this.node.parentNode) return null;\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.parentNode);\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $('query').descendants('.example')[0].get();\n    // $('query').descendants(); // ← No selector == children.\n    // ```\n    /**\n   * Gets all descendants which match a selector. If no selector is given,\n   * returns children.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQuery\n   */ descendants(selector) {\n        selector = selector || '';\n        if (selector === '') return this.children();\n        return new $d06b2385a2707aa5$var$DQuery(selector, this.node); // eslint-disable-line no-undef\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $('query').children(); // ← All direct children.\n    // $('query').children('.example');\n    // ```\n    /**\n   * Gets all immediate child HTML elements which match a selector. Excludes\n   * whitespace nodes, comment nodes, etc.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns []DQueryNode\n   */ children(selector) {\n        selector = selector || '';\n        return Array.from(this.node.childNodes).filter((e)=>e.nodeType === Node.ELEMENT_NODE\n        ).filter((e)=>selector !== '' && e.matches(selector) || selector === ''\n        ).map((e)=>new $d06b2385a2707aa5$var$DQueryNode(e)\n        );\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $('query').siblings().forEach($e => {\n    //   return $e.remove('enabled')\n    // })\n    // ```\n    /**\n   * Gets all sibling HTML elements of the immediate parent which match a\n   * selector. Excludes self, whitespace nodes, comment nodes, etc.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns []DQueryNode\n   */ siblings(selector) {\n        selector = selector || '';\n        if (!this.node.parentNode) return [];\n        let sibling = this.node.parentNode.firstChild;\n        const siblings = [];\n        while(sibling){\n            if (sibling !== this.node) {\n                if (sibling.nodeType === Node.ELEMENT_NODE && (selector !== '' && sibling.matches(selector) || selector === '')) siblings.push(new $d06b2385a2707aa5$var$DQueryNode(sibling));\n            }\n            sibling = sibling.nextSibling;\n        }\n        return siblings;\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // const start = $('query')[0];\n    // while (start.next() != null) {\n    //   console.debug(start.next());\n    //   start = start.next();\n    // }\n    // ```\n    /**\n   * Gets the immediately-next sibling which matches a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ next(selector) {\n        selector = selector || '';\n        let next = this.node.nextSibling;\n        while(next){\n            if (next.nodeType === Node.ELEMENT_NODE && (selector !== '' && next.matches(selector) || selector === '')) return new $d06b2385a2707aa5$var$DQueryNode(next);\n            next = next.nextSibling;\n        }\n        return null;\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // const start = $('query')[0];\n    // while (start.prev() != null) {\n    //   console.debug(start.prev());\n    //   start = start.prev();\n    // }\n    // ```\n    /**\n   * Gets the immediately-previous sibling which matches a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ prev(selector) {\n        selector = selector || '';\n        let prev = this.node.previousSibling;\n        while(prev){\n            if (prev.nodeType === Node.ELEMENT_NODE && (selector !== '' && prev.matches(selector) || selector === '')) return new $d06b2385a2707aa5$var$DQueryNode(prev);\n            prev = prev.previousSibling;\n        }\n        return null;\n    }\n    // ----\n    // ### Injecting new DOM nodes\n    // **Example:**\n    //\n    // ```javascript\n    // $(document.body).prepend(\n    //   _('p#abc').h('This is my paragraph!')\n    // ).get();\n    // //=> HTMLParagraphElement\n    // ```\n    /**\n   * Prepends the provided element to the selected node, then returns a pointer\n   * to the prepended node in the DOM.\n   *\n   * @param {string|Element} element (Required) The DOM element or HTML string\n   *     to prepend.\n   * @returns DQueryNode\n   */ prepend(element) {\n        if ((typeof element).toLowerCase() === 'string') this.node.insertAdjacentHTML('afterbegin', element);\n        else if (typeof element.dom !== 'undefined') this.node.insertAdjacentElement('afterbegin', element.dom());\n        else this.node.insertAdjacentElement('afterbegin', element);\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.childNodes[0]);\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $(document.body).append(\n    //   _('p#abc').h('This is my paragraph!')\n    // ).get();\n    // //=> HTMLParagraphElement\n    // ```\n    /**\n   * Appends the provided element to the selected node, then returns a pointer\n   * to the appended node in the DOM.\n   *\n   * @param {string|Element} element (Required) The DOM element or HTML string\n   *     to append.\n   * @returns DQueryNode\n   */ append(element) {\n        if ((typeof element).toLowerCase() === 'string') this.node.insertAdjacentHTML('beforeend', element);\n        else if (typeof element.dom !== 'undefined') this.node.insertAdjacentElement('beforeend', element.dom());\n        else this.node.insertAdjacentElement('beforeend', element);\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.childNodes[this.node.childNodes.length - 1]);\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $(document.body).children()[0].before(\n    //   _('p#abc').h('This is my paragraph!')\n    // ).get();\n    // //=> HTMLParagraphElement\n    // ```\n    /**\n   * Inserts the provided element before the selected node, then returns a\n   * pointer to the added node in the DOM.\n   *\n   * @param {string|Element} element (Required) The DOM element or HTML string\n   *     to insert before.\n   * @returns DQueryNode\n   */ before(element) {\n        if (typeof element.dom !== 'undefined') this.node.before(element.dom());\n        else this.node.before(element);\n        return this.prev();\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $(document.body).children()[0].after(\n    //   _('p#abc').h('This is my paragraph!')\n    // ).get();\n    // //=> HTMLParagraphElement\n    // ```\n    /**\n   * Inserts the provided element after the selected node, then returns a\n   * pointer to the added node in the DOM.\n   *\n   * @param {string|Element} element (Required) The DOM element or HTML string\n   *     to insert after.\n   * @returns DQueryNode\n   */ after(element) {\n        if (typeof element.dom !== 'undefined') this.node.after(element.dom());\n        else this.node.after(element);\n        return this.next();\n    }\n    // ----\n    // ### Managing classnames\n    // **Example:**\n    //\n    // ```javascript\n    // $('query')[0].classes();\n    // //=> DOMTokenList\n    // ```\n    /**\n   * Returns the list of classnames currently applied to the element.\n   *\n   * @returns DOMTokenList\n   */ classes() {\n        const node = this.node;\n        return node.classList;\n    }\n    // **Example:**\n    //\n    // ```html\n    // <body class=\"abc def ghi\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).has('abc');\n    // //=> true\n    //\n    // $(document.body).has('def');\n    // //=> true\n    //\n    // $(document.body).has('xyz');\n    // //=> false\n    // ```\n    /**\n   * Determines whether or not the element has the specified classname applied.\n   *\n   * @param {string} klass (Required) The classname to check on the element.\n   * @returns bool\n   */ has(klass) {\n        const node = this.node;\n        return node.classList.contains(klass);\n    }\n    // **Example:**\n    //\n    // ```html\n    // Before: <body class=\"abc\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).add('def');\n    // ```\n    //\n    // ```html\n    // After: <body class=\"abc def\">\n    // ```\n    /**\n   * Adds the specified classname to the element.\n   *\n   * @param {string} klass (Required) The classname to add to the element.\n   * @returns bool\n   */ add(klass) {\n        const node = this.node;\n        return node.classList.add(klass);\n    }\n    // **Example:**\n    //\n    // ```html\n    // Before: <body class=\"abc def\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).remove('def');\n    // ```\n    //\n    // ```html\n    // After: <body class=\"abc\">\n    // ```\n    /**\n   * Removes the specified classname to the element.\n   *\n   * @param {string} klass (Required) The classname to remove from the element.\n   * @returns bool\n   */ remove(klass) {\n        const node = this.node;\n        return node.classList.remove(klass);\n    }\n    // **Example:**\n    //\n    // ```html\n    // Before: <body class=\"abc\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).replace('abc', 'xyz');\n    // ```\n    //\n    // ```html\n    // After: <body class=\"xyz\">\n    // ```\n    /**\n   * Replaces the specified classname on the element with another classname.\n   *\n   * @param {string} klass1 (Required) The classname to remove from the element.\n   * @param {string} klass2 (Required) The classname to add to the element.\n   * @returns bool\n   */ replace(klass1, klass2) {\n        const node = this.node;\n        return node.classList.replace(klass1, klass2);\n    }\n    // **Example:**\n    //\n    // ```html\n    // Before: <body class=\"abc def\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).toggle('def');\n    // ```\n    //\n    // ```html\n    // After: <body class=\"abc\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).toggle('def');\n    // ```\n    //\n    // ```html\n    // After-After: <body class=\"abc def\">\n    // ```\n    /**\n   * Toggles a classname on the element. Returns a boolean value, `true` or\n   * `false`, indicating whether or not `klass` is in the list of classnames\n   * after the call or not.\n   *\n   * @param {string} klass (Required) The classname to toggle on the element.\n   * @returns bool\n   */ toggle(klass) {\n        const node = this.node;\n        return node.classList.toggle(klass);\n    }\n    // ----\n    // ### Events\n    // **Example:**\n    //\n    // ```javascript\n    // const dlg = Delegate;\n    //\n    // // Add event\n    // const evt = $(document.body).on('click',\n    //   dlg('.example', evt => {\n    //     $(evt.target).toggle('enabled')\n    //   })\n    // );\n    //\n    // // Remove event\n    // evt.remove();\n    // ```\n    /**\n   * A wrapper for addEventListener with `once: false`.\n   *\n   * @param {string} type A valid event type, like `click`. See\n   *     <https://developer.mozilla.org/en-US/docs/Web/Events> for more\n   *     information.\n   * @param {string|function|Delegate} fn A callback function to execute, or a\n   *     string containing the name of the function.\n   * @returns EventPointer\n   */ on(type, fn) {\n        const node = this.node;\n        node.addEventListener(type, fn, {\n            once: false\n        });\n        return {\n            remove: function() {\n                node.removeEventListener(type, fn, {\n                    once: false\n                });\n            }\n        };\n    }\n}\n// ----\n// ## DQuery\n//\n// Main interface for DQuery.\n/**\n * Main interface for DQuery.\n *\n * Fundamentally, `DQuery` is a wrapper around `querySelectorAll()`, except that\n * the matches are also wrapped with `DQueryNode`. This allows us to extend the\n * functionality.\n *\n * @param {string|Element} selector (Required) Either a (string) CSS selector\n *     (which will always result in an array of `DQueryNode` objects), or a DOM\n *     `Element` object (which will always result in a single `DQueryNode`\n *     element). See <https://developer.mozilla.org/en-US/docs/Web/API/Element>\n *     for more information.\n * @param {Element} elem (Optional) a DOM `Element` object which should be used\n *     as the parent-most element for the query. See\n *     <https://developer.mozilla.org/en-US/docs/Web/API/Element> for more\n *     information. The default value is `document`, which resolves to the\n *     `<html>` element.\n * @returns []DQueryNode|DQueryNode\n */ function $d06b2385a2707aa5$var$DQuery(selector, elem) {\n    // If we received a DOM `Element` object, just wrap it and return it.\n    if (selector instanceof Element) return new $d06b2385a2707aa5$var$DQueryNode(selector);\n    // If the `elem` parameter is not provided, use `document` (`<html>`)as the\n    // default root element for the query. Take the results, wrap each one with\n    // `DQueryNode`, and return the collection.\n    const collection = [];\n    elem = elem || document;\n    if (elem === document) {\n        document.querySelectorAll(selector).forEach((ee)=>{\n            collection.push(new $d06b2385a2707aa5$var$DQueryNode(ee));\n        });\n        return collection;\n    }\n    // If the `elem` parameter _is_ provided (which _may_ be an array of results),\n    // iterate over each of the results, then use `:scope` in the selector to\n    // filter to only children of `elem` (as opposed to `document`). This will\n    // give us the results we expect instead of too many results.\n    selector = [\n        ':scope',\n        selector\n    ].join(' ');\n    if (typeof elem[Symbol.iterator] !== 'function') elem = [\n        elem\n    ];\n    elem.forEach((e)=>{\n        e.querySelectorAll(selector).forEach((ee)=>{\n            collection.push(new $d06b2385a2707aa5$var$DQueryNode(ee));\n        });\n    });\n    return collection;\n}\nvar // Default export for the package.\n$d06b2385a2707aa5$export$2e2bcd8739ae039 = $d06b2385a2707aa5$var$DQuery;\n\n\nvar $2d9f69bafd62bfe5$exports = {};\n\n$parcel$defineInteropFlag($2d9f69bafd62bfe5$exports);\n\n$parcel$export($2d9f69bafd62bfe5$exports, \"default\", () => $2d9f69bafd62bfe5$export$2e2bcd8739ae039);\n// Taken from https://github.com/brunoscopelliti/delegate under the MIT license.\n// Reversed the `(selector, fn)` parameters.\n// **Example:**\n//\n// ```javascript\n// const dlg = Delegate;\n//\n// // Add event\n// const evt = $(document.body).on('click', dlg('#test', e => {\n//   e.classList.toggle('enabled');\n// }));\n//\n// // Remove event\n// evt.remove();\n// ```\n/**\n * Assure that the provided function, `fn`, is executed only when its wrapping\n * function is called on a target that matches the `selector`.\n *\n * @name delegate\n * @param {string} selector\n * @param {function} fn\n *\n * @returns {function}\n */ const $2d9f69bafd62bfe5$var$Delegate = (selector, fn)=>function handler(event) {\n        const matchingEl = $2d9f69bafd62bfe5$var$matches(event.target, selector, this); // eslint-disable-line no-invalid-this\n        if (matchingEl !== null) fn.call(matchingEl, event);\n    }\n;\nvar // Default export for the package.\n$2d9f69bafd62bfe5$export$2e2bcd8739ae039 = $2d9f69bafd62bfe5$var$Delegate;\n// Private method. Not exposed to the public.\n/**\n * @name matches\n * @private\n */ const $2d9f69bafd62bfe5$var$matches = (target, selector, boundElement)=>{\n    if (target === boundElement) return null;\n    if (target.matches(selector)) return target;\n    if (target.parentNode) return $2d9f69bafd62bfe5$var$matches(target.parentNode, selector, boundElement);\n    return null;\n};\n\n\nvar $d0e0ac82cf77fdb6$exports = {};\n\n$parcel$defineInteropFlag($d0e0ac82cf77fdb6$exports);\n\n$parcel$export($d0e0ac82cf77fdb6$exports, \"default\", () => $d0e0ac82cf77fdb6$export$2e2bcd8739ae039);\n// VDOM is an updated ES6+ version of a Virtual DOM implementation I built in\n// 2008 before Virtual DOM even had a name yet.\n//\n// The term “Virtual DOM” refers to real DOM nodes that exist in memory, but are\n// not attached to the _live_ tree. This means that they can be modified and\n// manipulated in-memory without triggering repaints and reflows in the browser\n// engine, making modifications dramatically faster.\n//\n// By leveraging `DocumentFragment` objects under the hood, we can collect one\n// or more sibling elements together which do not have a shared parent node\n// until they are injected into the live DOM. This is fundamentally the same way\n// that `React.createElement()` works, and the syntax is very similar.\n//\n// **Examples:**\n//\n// From the <https://reactjs.org> homepage, this example generates a new DOM\n// element and appends it to the live DOM.\n//\n// ```javascript\n// class HelloMessage extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//         Hello {this.props.name}\n//       </div>\n//     );\n//     // or...\n//     // return React.createElement(\n//     //   \"div\",\n//     //   null,\n//     //   \"Hello \",\n//     //   this.props.name\n//     // );\n//   }\n// }\n//\n// ReactDOM.render(\n//   React.createElement(\n//     HelloMessage, { name: \"Taylor\" }\n//   ),\n//   document.getElementById('hello-example')\n// );\n// ```\n//\n// Here's a (roughly) equivalent example using VDOM, except that there are no\n// _magical_ `props` because there are no `components`. Just standard functions\n// and variables.\n//\n// ```javascript\n// const _ = VDOM,\n//       $ = DQuery;\n//\n// function HelloMessage(props) {\n//   return `\n//     <div>\n//       Hello ${props.name}\n//     </div>\n//   `;\n//   // or...\n//   // return _('div').h(`Hello ${props.name}`);\n// }\n//\n// $('#hello-example')[0].append(\n//   HelloMessage({ name: \"Taylor\" })\n// );\n// ```\n//\n// VDOM sits much “closer to the metal”, which makes it (a) faster, and (b)\n// smaller. While it lacks some of the niceties like JSX, you can still use\n// `innerHTML` which gets you _most_ of the way there at very little cost.\n//\n// ----\nconst $d0e0ac82cf77fdb6$var$X = function(elem, attr) {\n    const self = this, RE_ID_OR_CLASS = /[\\.#]/u, RE_CSS_ATTRS = /\\[([^\\]]+)\\]/gu, ARR_NEXT = 1;\n    let key, k, match;\n    attr = attr || {\n    };\n    // Parse the CSS-style notation.\n    function notation() {\n        const att = {\n            class: [],\n            id: ''\n        }, kvPair = [];\n        if (!RE_ID_OR_CLASS.test(elem) && !RE_CSS_ATTRS.test(elem)) return {\n        };\n        // Collect all of the `[k=v]` blocks.\n        while((match = RE_CSS_ATTRS.exec(elem)) !== null)kvPair.push(match[1].split('='));\n        elem = elem.replace(RE_CSS_ATTRS, '');\n        const pieces = elem.split(RE_ID_OR_CLASS), elemType = pieces.shift();\n        kvPair.forEach((val, idx, arr)=>{\n            att[arr[idx][0]] = arr[idx][1];\n        });\n        // Support CSS/jQuery-style notation for generating elements with IDs and classnames.\n        let pos = elemType.length;\n        const classes = att['class'];\n        pieces.forEach((val, idx, arr)=>{\n            if (elem[pos] === '#') att.id = val;\n            else classes.push(val);\n            pos += arr[idx].length + ARR_NEXT;\n        });\n        att['class'] = classes;\n        if (!att['class'].length) delete att['class'];\n        if (att['id'] === '') delete att['id'];\n        return att;\n    }\n    // Merge options into a conglomo-hash!\n    attr = Object.assign(attr, notation());\n    // Construct the element, loop through the list of attributes and add them to the node.\n    if (RE_ID_OR_CLASS.test(elem)) self.e = document.createElement(elem.split(RE_ID_OR_CLASS).shift());\n    else self.e = document.createElement(elem);\n    if (attr) {\n        for(key in attr)if (Object.prototype.hasOwnProperty.call(attr, key)) {\n            if (typeof attr[key] === 'object' && typeof attr[key].length === 'number' && typeof attr[key].splice === 'function') attr[key] = attr[key].join(' ');\n            if (key.toString() === 'class') self.e.className = attr[key];\n            else if (key.toString() === 'data') {\n                for(k in attr[key])if (Object.prototype.hasOwnProperty.call(attr[key], k)) self.e.setAttribute(`data-${k}`, attr[key][k]);\n            } else self.e.setAttribute(key, attr[key]);\n        }\n    }\n    // Handle child nodes.\n    self._ = (obj)=>{\n        // If the object isn't an array, convert it to an array to maintain a single codepath below.\n        if (!Array.isArray(obj)) obj = [\n            obj\n        ];\n        // Loop through the indexed array of children. If the node is a `VDOM` object, convert it to\n        // DOM and append it. Otherwise, assume it's a real DOM node.\n        for(let i = 0, max = obj.length; i < max; i++){\n            if (typeof obj[i] === 'undefined') break;\n            if (typeof obj[i].dom !== 'undefined') self.e.appendChild(obj[i].dom());\n            else self.e.appendChild(obj[i]);\n        }\n        return self;\n    };\n    // Set the HTML\n    self.h = (str, replace)=>{\n        // Determine the default value for `replace`.\n        replace = replace || false;\n        // Set the value with innerHTML.\n        if (replace) self.e.innerHTML = str;\n        else self.e.innerHTML += str;\n        return self;\n    };\n    // Set the text\n    self.t = (str)=>{\n        // No parameters? Read the value instead. Alias for __t().\n        if (typeof str === 'undefined') return self.__t();\n        // Set the value\n        const text = document.createTextNode(str);\n        self.e.appendChild(text);\n        return self;\n    };\n    // Get DOMElement\n    self.dom = ()=>self.e\n    ;\n    // Get as HTML\n    self.toString = ()=>{\n        const t = document.createElement('div');\n        t.appendChild(self.e);\n        return t.innerHTML;\n    };\n    // Get as text\n    self.__t = ()=>{\n        const t = document.createElement('div');\n        t.appendChild(self.e);\n        return t.textContent || t.innerText;\n    };\n    return self;\n}, // Pre-instantiate the class on each call so that you never need to use `new`.\n$d0e0ac82cf77fdb6$var$VDOM = (elem, attr)=>new $d0e0ac82cf77fdb6$var$X(elem, attr)\n; // eslint-disable-line no-undef\n$d0e0ac82cf77fdb6$var$VDOM.DOM = (...nodes)=>{\n    // Create a document fragment. Grab and loop through the in-memory DOM nodes,\n    // and _move_ them to the `DocumentFragment`.\n    const f = document.createDocumentFragment(), n = new $d0e0ac82cf77fdb6$var$X('div')._(nodes).dom().childNodes;\n    while(n.length)f.appendChild(n[0]);\n    return f;\n};\n$d0e0ac82cf77fdb6$var$VDOM.t = (str)=>document.createTextNode(str)\n; // eslint-disable-line no-undef\n$d0e0ac82cf77fdb6$var$VDOM.h = (str)=>{\n    const f = document.createDocumentFragment(), n = new $d0e0ac82cf77fdb6$var$X('div').h(str).dom().childNodes;\n    while(n.length)f.appendChild(n[0]);\n    return f;\n};\nvar // Default export for the package.\n$d0e0ac82cf77fdb6$export$2e2bcd8739ae039 = $d0e0ac82cf77fdb6$var$VDOM;\n\n\nconst $690703a408b303b8$export$a4ad2735b021c132 = '1.0.1';\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,data:application/json;charset=utf-8;base64,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RUFDcEIsR0FBRyxHQUFHLFVBQVU7VUFFYixDQUFDLENBQUMsTUFBTSxDQUNiLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFHbkIsTUFBTSxDQUFDLENBQUM7QUFDVixDQUFDO0lBRUQsRUFBa0MsQUFBbEMsZ0NBQWtDO0FBQ2xDLHdDQUFvQixHQUFMLDBCQUFJOzs7QUg3UVosS0FBSyxDQUFDLHlDQUFPLEdBQUcsQ0FBTyIsInNvdXJjZXMiOlsic3JjL2luZGV4LmpzIiwic3JjL2RxdWVyeS5qcyIsInNyYy9kZWxlZ2F0ZS5qcyIsInNyYy92ZG9tLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgcHVsbHMgdG9nZXRoZXIgYW5kIGV4cG9zZXMgYWxsIG9mIEZpcmVjcmFja2VyLmpzIHRob3VnaCBhIHNpbmdsZSBpbXBvcnQuXG5cbmltcG9ydCBEUXVlcnkgZnJvbSAnLi9kcXVlcnknOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5pbXBvcnQgRGVsZWdhdGUgZnJvbSAnLi9kZWxlZ2F0ZSc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbmltcG9ydCBWRE9NIGZyb20gJy4vdmRvbSc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuZXhwb3J0IHtcbiAgRFF1ZXJ5LFxuICBEZWxlZ2F0ZSxcbiAgVkRPTSxcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHZlcnNpb24gb2YgdGhpcyByZWxlYXNlIG9mIEZpcmVjcmFja2VyLmpzLiBUaGlzIGlzIGdlbmVyYXRlZC91cGRhdGVkIGJ5IGBtYWtlIHZlcnNpb25gLlxuZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnMS4wLjEnO1xuIiwiLy8gIyMgRFF1ZXJ5Tm9kZVxuLy9cbi8vIGBEUXVlcnlOb2RlYCBpcyBhIHByaXZhdGUgY2xhc3MuIE5vdCBleHBvc2VkIHRvIHRoZSBwdWJsaWMuXG4vL1xuLy8gSW5kaXZpZHVhbCBlbGVtZW50cyBhcmUgd3JhcHBlZCBpbiBhIGBEUXVlcnlOb2RlYCBvYmplY3QuIFRoaXMgYWxsb3dzIHVzIHRvXG4vLyBleHRlbmQgdGhlIGZ1bmN0aW9uYWxpdHkuIFlvdSB3b24ndCB1c2UgdGhpcyBkaXJlY3RseSwgYnV0IHJhdGhlciBhcyB0aGVcbi8vIHJlc3VsdCBvZiB1c2luZyBgRFF1ZXJ5YCB0byBkaXNjb3ZlciByZXN1bHRzLlxuLyoqXG4gKiBJbmRpdmlkdWFsIGVsZW1lbnRzIGFyZSB3cmFwcGVkIGluIGEgYERRdWVyeU5vZGVgIG9iamVjdC4gVGhpcyBhbGxvd3MgdXMgdG9cbiAqIGV4dGVuZCB0aGUgZnVuY3Rpb25hbGl0eS4gWW91IHdvbid0IHVzZSB0aGlzIGRpcmVjdGx5LCBidXQgcmF0aGVyIGFzIHRoZVxuICogcmVzdWx0IG9mIHVzaW5nIERRdWVyeSB0byBkaXNjb3ZlciByZXN1bHRzLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZSAoUmVxdWlyZWQpIEEgRE9NIGBFbGVtZW50YCBvYmplY3QuIFNlZVxuICogICAgIDxodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudD4gZm9yIG1vcmVcbiAqICAgICBpbmZvcm1hdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIERRdWVyeU5vZGUge1xuICAvKipcbiAgICogRFF1ZXJ5Tm9kZSB3cmFwcyBET00gRWxlbWVudCBvYmplY3RzIHdpdGggZW5oYW5jZWQgZnVuY3Rpb25hbGl0eS5cbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBub2RlIEEgRE9NIEVsZW1lbnQgb2JqZWN0LCB3aGljaCByZXByZXNlbnRzIGFuIEhUTUwgdGFnLlxuICAgKi9cbiAgY29uc3RydWN0b3Iobm9kZSkge1xuICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gIH1cblxuICAvLyAtLS0tXG4gIC8vICMjIyBRdWVyeWluZy9UcmF2ZXJzaW5nIHRoZSBET00gdHJlZVxuXG4gIC8vICoqRXhhbXBsZToqKlxuICAvL1xuICAvLyBgYGBqYXZhc2NyaXB0XG4gIC8vICQoJ3F1ZXJ5JylbMF0uZ2V0KCk7XG4gIC8vICQoZG9jdW1lbnQuYm9keSkuZ2V0KCk7XG4gIC8vIGBgYFxuICAvKipcbiAgICogR2V0cyB0aGUgdW5kZXJseWluZyBuYXRpdmUgRE9NIEVsZW1lbnQgb2JqZWN0LlxuICAgKlxuICAgKiBAcmV0dXJucyBFbGVtZW50XG4gICAqL1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZTtcbiAgfVxuXG4gIC8vICoqRXhhbXBsZToqKlxuICAvL1xuICAvLyBgYGBqYXZhc2NyaXB0XG4gIC8vICQoJ3F1ZXJ5JykuYW5jZXN0b3IoJy5leGFtcGxlJykuZ2V0KCk7XG4gIC8vICQoJ3F1ZXJ5JykuYW5jZXN0b3IoKS5nZXQoKTsgLy8g4oaQIE5vIHNlbGVjdG9yID09IHBhcmVudC5cbiAgLy8gYGBgXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBuZWFyZXN0IGFuY2VzdG9yIHdoaWNoIG1hdGNoZXMgYSBzZWxlY3Rvci4gSWYgbm8gc2VsZWN0b3IgaXNcbiAgICogZ2l2ZW4sIHJldHVybnMgcGFyZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgKE9wdGlvbmFsKSBDU1Mgc2VsZWN0b3IgdG8gbWF0Y2gsIGlmIGFueS5cbiAgICogQHJldHVybnMgRFF1ZXJ5Tm9kZVxuICAgKi9cbiAgYW5jZXN0b3Ioc2VsZWN0b3IpIHtcbiAgICBzZWxlY3RvciA9IHNlbGVjdG9yIHx8ICcnO1xuXG4gICAgaWYgKHNlbGVjdG9yID09PSAnJykge1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEUXVlcnlOb2RlKHRoaXMubm9kZS5jbG9zZXN0KHNlbGVjdG9yKSk7XG4gIH1cblxuICAvLyAqKkV4YW1wbGU6KipcbiAgLy9cbiAgLy8gYGBgamF2YXNjcmlwdFxuICAvLyAkKCdxdWVyeScpLnBhcmVudCgpLmdldCgpO1xuICAvLyBgYGBcbiAgLyoqXG4gICAqIEdldHMgdGhlIGltbWVkaWF0ZSBwYXJlbnQgZWxlbWVudC5cbiAgICpcbiAgICogQHJldHVybnMgRFF1ZXJ5Tm9kZVxuICAgKi9cbiAgcGFyZW50KCkge1xuICAgIGlmICghdGhpcy5ub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRFF1ZXJ5Tm9kZSh0aGlzLm5vZGUucGFyZW50Tm9kZSk7XG4gIH1cblxuICAvLyAqKkV4YW1wbGU6KipcbiAgLy9cbiAgLy8gYGBgamF2YXNjcmlwdFxuICAvLyAkKCdxdWVyeScpLmRlc2NlbmRhbnRzKCcuZXhhbXBsZScpWzBdLmdldCgpO1xuICAvLyAkKCdxdWVyeScpLmRlc2NlbmRhbnRzKCk7IC8vIOKGkCBObyBzZWxlY3RvciA9PSBjaGlsZHJlbi5cbiAgLy8gYGBgXG4gIC8qKlxuICAgKiBHZXRzIGFsbCBkZXNjZW5kYW50cyB3aGljaCBtYXRjaCBhIHNlbGVjdG9yLiBJZiBubyBzZWxlY3RvciBpcyBnaXZlbixcbiAgICogcmV0dXJucyBjaGlsZHJlbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIChPcHRpb25hbCkgQ1NTIHNlbGVjdG9yIHRvIG1hdGNoLCBpZiBhbnkuXG4gICAqIEByZXR1cm5zIERRdWVyeVxuICAgKi9cbiAgZGVzY2VuZGFudHMoc2VsZWN0b3IpIHtcbiAgICBzZWxlY3RvciA9IHNlbGVjdG9yIHx8ICcnO1xuXG4gICAgaWYgKHNlbGVjdG9yID09PSAnJykge1xuICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERRdWVyeShzZWxlY3RvciwgdGhpcy5ub2RlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICB9XG5cbiAgLy8gKipFeGFtcGxlOioqXG4gIC8vXG4gIC8vIGBgYGphdmFzY3JpcHRcbiAgLy8gJCgncXVlcnknKS5jaGlsZHJlbigpOyAvLyDihpAgQWxsIGRpcmVjdCBjaGlsZHJlbi5cbiAgLy8gJCgncXVlcnknKS5jaGlsZHJlbignLmV4YW1wbGUnKTtcbiAgLy8gYGBgXG4gIC8qKlxuICAgKiBHZXRzIGFsbCBpbW1lZGlhdGUgY2hpbGQgSFRNTCBlbGVtZW50cyB3aGljaCBtYXRjaCBhIHNlbGVjdG9yLiBFeGNsdWRlc1xuICAgKiB3aGl0ZXNwYWNlIG5vZGVzLCBjb21tZW50IG5vZGVzLCBldGMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciAoT3B0aW9uYWwpIENTUyBzZWxlY3RvciB0byBtYXRjaCwgaWYgYW55LlxuICAgKiBAcmV0dXJucyBbXURRdWVyeU5vZGVcbiAgICovXG4gIGNoaWxkcmVuKHNlbGVjdG9yKSB7XG4gICAgc2VsZWN0b3IgPSBzZWxlY3RvciB8fCAnJztcblxuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMubm9kZS5jaGlsZE5vZGVzKS5cbiAgICAgIGZpbHRlcihlID0+IGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKS5cbiAgICAgIGZpbHRlcihlID0+IChzZWxlY3RvciAhPT0gJycgJiYgZS5tYXRjaGVzKHNlbGVjdG9yKSkgfHwgc2VsZWN0b3IgPT09ICcnKS5cbiAgICAgIG1hcChlID0+IG5ldyBEUXVlcnlOb2RlKGUpKTtcbiAgfVxuXG4gIC8vICoqRXhhbXBsZToqKlxuICAvL1xuICAvLyBgYGBqYXZhc2NyaXB0XG4gIC8vICQoJ3F1ZXJ5Jykuc2libGluZ3MoKS5mb3JFYWNoKCRlID0+IHtcbiAgLy8gICByZXR1cm4gJGUucmVtb3ZlKCdlbmFibGVkJylcbiAgLy8gfSlcbiAgLy8gYGBgXG4gIC8qKlxuICAgKiBHZXRzIGFsbCBzaWJsaW5nIEhUTUwgZWxlbWVudHMgb2YgdGhlIGltbWVkaWF0ZSBwYXJlbnQgd2hpY2ggbWF0Y2ggYVxuICAgKiBzZWxlY3Rvci4gRXhjbHVkZXMgc2VsZiwgd2hpdGVzcGFjZSBub2RlcywgY29tbWVudCBub2RlcywgZXRjLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgKE9wdGlvbmFsKSBDU1Mgc2VsZWN0b3IgdG8gbWF0Y2gsIGlmIGFueS5cbiAgICogQHJldHVybnMgW11EUXVlcnlOb2RlXG4gICAqL1xuICBzaWJsaW5ncyhzZWxlY3Rvcikge1xuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgfHwgJyc7XG5cbiAgICBpZiAoIXRoaXMubm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgbGV0IHNpYmxpbmcgPSB0aGlzLm5vZGUucGFyZW50Tm9kZS5maXJzdENoaWxkO1xuICAgIGNvbnN0IHNpYmxpbmdzID0gW107XG5cbiAgICB3aGlsZSAoc2libGluZykge1xuICAgICAgaWYgKHNpYmxpbmcgIT09IHRoaXMubm9kZSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgc2libGluZy5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREVcbiAgICAgICAgICAmJiAoKHNlbGVjdG9yICE9PSAnJyAmJiBzaWJsaW5nLm1hdGNoZXMoc2VsZWN0b3IpKSB8fCBzZWxlY3RvciA9PT0gJycpXG4gICAgICAgICkge1xuICAgICAgICAgIHNpYmxpbmdzLnB1c2gobmV3IERRdWVyeU5vZGUoc2libGluZykpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNpYmxpbmcgPSBzaWJsaW5nLm5leHRTaWJsaW5nO1xuICAgIH1cblxuICAgIHJldHVybiBzaWJsaW5ncztcbiAgfVxuXG4gIC8vICoqRXhhbXBsZToqKlxuICAvL1xuICAvLyBgYGBqYXZhc2NyaXB0XG4gIC8vIGNvbnN0IHN0YXJ0ID0gJCgncXVlcnknKVswXTtcbiAgLy8gd2hpbGUgKHN0YXJ0Lm5leHQoKSAhPSBudWxsKSB7XG4gIC8vICAgY29uc29sZS5kZWJ1ZyhzdGFydC5uZXh0KCkpO1xuICAvLyAgIHN0YXJ0ID0gc3RhcnQubmV4dCgpO1xuICAvLyB9XG4gIC8vIGBgYFxuICAvKipcbiAgICogR2V0cyB0aGUgaW1tZWRpYXRlbHktbmV4dCBzaWJsaW5nIHdoaWNoIG1hdGNoZXMgYSBzZWxlY3Rvci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIChPcHRpb25hbCkgQ1NTIHNlbGVjdG9yIHRvIG1hdGNoLCBpZiBhbnkuXG4gICAqIEByZXR1cm5zIERRdWVyeU5vZGVcbiAgICovXG4gIG5leHQoc2VsZWN0b3IpIHtcbiAgICBzZWxlY3RvciA9IHNlbGVjdG9yIHx8ICcnO1xuICAgIGxldCBuZXh0ID0gdGhpcy5ub2RlLm5leHRTaWJsaW5nO1xuXG4gICAgd2hpbGUgKG5leHQpIHtcbiAgICAgIGlmIChuZXh0Lm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiAoKHNlbGVjdG9yICE9PSAnJyAmJiBuZXh0Lm1hdGNoZXMoc2VsZWN0b3IpKSB8fCBzZWxlY3RvciA9PT0gJycpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRFF1ZXJ5Tm9kZShuZXh0KTtcbiAgICAgIH1cblxuICAgICAgbmV4dCA9IG5leHQubmV4dFNpYmxpbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyAqKkV4YW1wbGU6KipcbiAgLy9cbiAgLy8gYGBgamF2YXNjcmlwdFxuICAvLyBjb25zdCBzdGFydCA9ICQoJ3F1ZXJ5JylbMF07XG4gIC8vIHdoaWxlIChzdGFydC5wcmV2KCkgIT0gbnVsbCkge1xuICAvLyAgIGNvbnNvbGUuZGVidWcoc3RhcnQucHJldigpKTtcbiAgLy8gICBzdGFydCA9IHN0YXJ0LnByZXYoKTtcbiAgLy8gfVxuICAvLyBgYGBcbiAgLyoqXG4gICAqIEdldHMgdGhlIGltbWVkaWF0ZWx5LXByZXZpb3VzIHNpYmxpbmcgd2hpY2ggbWF0Y2hlcyBhIHNlbGVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgKE9wdGlvbmFsKSBDU1Mgc2VsZWN0b3IgdG8gbWF0Y2gsIGlmIGFueS5cbiAgICogQHJldHVybnMgRFF1ZXJ5Tm9kZVxuICAgKi9cbiAgcHJldihzZWxlY3Rvcikge1xuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgfHwgJyc7XG4gICAgbGV0IHByZXYgPSB0aGlzLm5vZGUucHJldmlvdXNTaWJsaW5nO1xuXG4gICAgd2hpbGUgKHByZXYpIHtcbiAgICAgIGlmIChwcmV2Lm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiAoKHNlbGVjdG9yICE9PSAnJyAmJiBwcmV2Lm1hdGNoZXMoc2VsZWN0b3IpKSB8fCBzZWxlY3RvciA9PT0gJycpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRFF1ZXJ5Tm9kZShwcmV2KTtcbiAgICAgIH1cblxuICAgICAgcHJldiA9IHByZXYucHJldmlvdXNTaWJsaW5nO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gLS0tLVxuICAvLyAjIyMgSW5qZWN0aW5nIG5ldyBET00gbm9kZXNcblxuICAvLyAqKkV4YW1wbGU6KipcbiAgLy9cbiAgLy8gYGBgamF2YXNjcmlwdFxuICAvLyAkKGRvY3VtZW50LmJvZHkpLnByZXBlbmQoXG4gIC8vICAgXygncCNhYmMnKS5oKCdUaGlzIGlzIG15IHBhcmFncmFwaCEnKVxuICAvLyApLmdldCgpO1xuICAvLyAvLz0+IEhUTUxQYXJhZ3JhcGhFbGVtZW50XG4gIC8vIGBgYFxuICAvKipcbiAgICogUHJlcGVuZHMgdGhlIHByb3ZpZGVkIGVsZW1lbnQgdG8gdGhlIHNlbGVjdGVkIG5vZGUsIHRoZW4gcmV0dXJucyBhIHBvaW50ZXJcbiAgICogdG8gdGhlIHByZXBlbmRlZCBub2RlIGluIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfEVsZW1lbnR9IGVsZW1lbnQgKFJlcXVpcmVkKSBUaGUgRE9NIGVsZW1lbnQgb3IgSFRNTCBzdHJpbmdcbiAgICogICAgIHRvIHByZXBlbmQuXG4gICAqIEByZXR1cm5zIERRdWVyeU5vZGVcbiAgICovXG4gIHByZXBlbmQoZWxlbWVudCkge1xuICAgIGlmICgodHlwZW9mIGVsZW1lbnQpLnRvTG93ZXJDYXNlKCkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLm5vZGUuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgZWxlbWVudCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbWVudC5kb20gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm5vZGUuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmJlZ2luJywgZWxlbWVudC5kb20oKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubm9kZS5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyYmVnaW4nLCBlbGVtZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERRdWVyeU5vZGUodGhpcy5ub2RlLmNoaWxkTm9kZXNbMF0pO1xuICB9XG5cbiAgLy8gKipFeGFtcGxlOioqXG4gIC8vXG4gIC8vIGBgYGphdmFzY3JpcHRcbiAgLy8gJChkb2N1bWVudC5ib2R5KS5hcHBlbmQoXG4gIC8vICAgXygncCNhYmMnKS5oKCdUaGlzIGlzIG15IHBhcmFncmFwaCEnKVxuICAvLyApLmdldCgpO1xuICAvLyAvLz0+IEhUTUxQYXJhZ3JhcGhFbGVtZW50XG4gIC8vIGBgYFxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgcHJvdmlkZWQgZWxlbWVudCB0byB0aGUgc2VsZWN0ZWQgbm9kZSwgdGhlbiByZXR1cm5zIGEgcG9pbnRlclxuICAgKiB0byB0aGUgYXBwZW5kZWQgbm9kZSBpbiB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xFbGVtZW50fSBlbGVtZW50IChSZXF1aXJlZCkgVGhlIERPTSBlbGVtZW50IG9yIEhUTUwgc3RyaW5nXG4gICAqICAgICB0byBhcHBlbmQuXG4gICAqIEByZXR1cm5zIERRdWVyeU5vZGVcbiAgICovXG4gIGFwcGVuZChlbGVtZW50KSB7XG4gICAgaWYgKCh0eXBlb2YgZWxlbWVudCkudG9Mb3dlckNhc2UoKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMubm9kZS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGVsZW1lbnQpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQuZG9tICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5ub2RlLmluc2VydEFkamFjZW50RWxlbWVudCgnYmVmb3JlZW5kJywgZWxlbWVudC5kb20oKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubm9kZS5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2JlZm9yZWVuZCcsIGVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRFF1ZXJ5Tm9kZSh0aGlzLm5vZGUuY2hpbGROb2Rlc1t0aGlzLm5vZGUuY2hpbGROb2Rlcy5sZW5ndGggLSAxXSk7XG4gIH1cblxuICAvLyAqKkV4YW1wbGU6KipcbiAgLy9cbiAgLy8gYGBgamF2YXNjcmlwdFxuICAvLyAkKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKClbMF0uYmVmb3JlKFxuICAvLyAgIF8oJ3AjYWJjJykuaCgnVGhpcyBpcyBteSBwYXJhZ3JhcGghJylcbiAgLy8gKS5nZXQoKTtcbiAgLy8gLy89PiBIVE1MUGFyYWdyYXBoRWxlbWVudFxuICAvLyBgYGBcbiAgLyoqXG4gICAqIEluc2VydHMgdGhlIHByb3ZpZGVkIGVsZW1lbnQgYmVmb3JlIHRoZSBzZWxlY3RlZCBub2RlLCB0aGVuIHJldHVybnMgYVxuICAgKiBwb2ludGVyIHRvIHRoZSBhZGRlZCBub2RlIGluIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfEVsZW1lbnR9IGVsZW1lbnQgKFJlcXVpcmVkKSBUaGUgRE9NIGVsZW1lbnQgb3IgSFRNTCBzdHJpbmdcbiAgICogICAgIHRvIGluc2VydCBiZWZvcmUuXG4gICAqIEByZXR1cm5zIERRdWVyeU5vZGVcbiAgICovXG4gIGJlZm9yZShlbGVtZW50KSB7XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50LmRvbSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMubm9kZS5iZWZvcmUoZWxlbWVudC5kb20oKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubm9kZS5iZWZvcmUoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHJldigpO1xuICB9XG5cbiAgLy8gKipFeGFtcGxlOioqXG4gIC8vXG4gIC8vIGBgYGphdmFzY3JpcHRcbiAgLy8gJChkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpWzBdLmFmdGVyKFxuICAvLyAgIF8oJ3AjYWJjJykuaCgnVGhpcyBpcyBteSBwYXJhZ3JhcGghJylcbiAgLy8gKS5nZXQoKTtcbiAgLy8gLy89PiBIVE1MUGFyYWdyYXBoRWxlbWVudFxuICAvLyBgYGBcbiAgLyoqXG4gICAqIEluc2VydHMgdGhlIHByb3ZpZGVkIGVsZW1lbnQgYWZ0ZXIgdGhlIHNlbGVjdGVkIG5vZGUsIHRoZW4gcmV0dXJucyBhXG4gICAqIHBvaW50ZXIgdG8gdGhlIGFkZGVkIG5vZGUgaW4gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8RWxlbWVudH0gZWxlbWVudCAoUmVxdWlyZWQpIFRoZSBET00gZWxlbWVudCBvciBIVE1MIHN0cmluZ1xuICAgKiAgICAgdG8gaW5zZXJ0IGFmdGVyLlxuICAgKiBAcmV0dXJucyBEUXVlcnlOb2RlXG4gICAqL1xuICBhZnRlcihlbGVtZW50KSB7XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50LmRvbSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMubm9kZS5hZnRlcihlbGVtZW50LmRvbSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ub2RlLmFmdGVyKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm5leHQoKTtcbiAgfVxuXG4gIC8vIC0tLS1cbiAgLy8gIyMjIE1hbmFnaW5nIGNsYXNzbmFtZXNcblxuICAvLyAqKkV4YW1wbGU6KipcbiAgLy9cbiAgLy8gYGBgamF2YXNjcmlwdFxuICAvLyAkKCdxdWVyeScpWzBdLmNsYXNzZXMoKTtcbiAgLy8gLy89PiBET01Ub2tlbkxpc3RcbiAgLy8gYGBgXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIGNsYXNzbmFtZXMgY3VycmVudGx5IGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAqXG4gICAqIEByZXR1cm5zIERPTVRva2VuTGlzdFxuICAgKi9cbiAgY2xhc3NlcygpIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5ub2RlO1xuXG4gICAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0O1xuICB9XG5cbiAgLy8gKipFeGFtcGxlOioqXG4gIC8vXG4gIC8vIGBgYGh0bWxcbiAgLy8gPGJvZHkgY2xhc3M9XCJhYmMgZGVmIGdoaVwiPlxuICAvLyBgYGBcbiAgLy9cbiAgLy8gYGBgamF2YXNjcmlwdFxuICAvLyAkKGRvY3VtZW50LmJvZHkpLmhhcygnYWJjJyk7XG4gIC8vIC8vPT4gdHJ1ZVxuICAvL1xuICAvLyAkKGRvY3VtZW50LmJvZHkpLmhhcygnZGVmJyk7XG4gIC8vIC8vPT4gdHJ1ZVxuICAvL1xuICAvLyAkKGRvY3VtZW50LmJvZHkpLmhhcygneHl6Jyk7XG4gIC8vIC8vPT4gZmFsc2VcbiAgLy8gYGBgXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRoZSBlbGVtZW50IGhhcyB0aGUgc3BlY2lmaWVkIGNsYXNzbmFtZSBhcHBsaWVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2xhc3MgKFJlcXVpcmVkKSBUaGUgY2xhc3NuYW1lIHRvIGNoZWNrIG9uIHRoZSBlbGVtZW50LlxuICAgKiBAcmV0dXJucyBib29sXG4gICAqL1xuICBoYXMoa2xhc3MpIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5ub2RlO1xuXG4gICAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKGtsYXNzKTtcbiAgfVxuXG4gIC8vICoqRXhhbXBsZToqKlxuICAvL1xuICAvLyBgYGBodG1sXG4gIC8vIEJlZm9yZTogPGJvZHkgY2xhc3M9XCJhYmNcIj5cbiAgLy8gYGBgXG4gIC8vXG4gIC8vIGBgYGphdmFzY3JpcHRcbiAgLy8gJChkb2N1bWVudC5ib2R5KS5hZGQoJ2RlZicpO1xuICAvLyBgYGBcbiAgLy9cbiAgLy8gYGBgaHRtbFxuICAvLyBBZnRlcjogPGJvZHkgY2xhc3M9XCJhYmMgZGVmXCI+XG4gIC8vIGBgYFxuICAvKipcbiAgICogQWRkcyB0aGUgc3BlY2lmaWVkIGNsYXNzbmFtZSB0byB0aGUgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtsYXNzIChSZXF1aXJlZCkgVGhlIGNsYXNzbmFtZSB0byBhZGQgdG8gdGhlIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIGJvb2xcbiAgICovXG4gIGFkZChrbGFzcykge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLm5vZGU7XG5cbiAgICByZXR1cm4gbm9kZS5jbGFzc0xpc3QuYWRkKGtsYXNzKTtcbiAgfVxuXG4gIC8vICoqRXhhbXBsZToqKlxuICAvL1xuICAvLyBgYGBodG1sXG4gIC8vIEJlZm9yZTogPGJvZHkgY2xhc3M9XCJhYmMgZGVmXCI+XG4gIC8vIGBgYFxuICAvL1xuICAvLyBgYGBqYXZhc2NyaXB0XG4gIC8vICQoZG9jdW1lbnQuYm9keSkucmVtb3ZlKCdkZWYnKTtcbiAgLy8gYGBgXG4gIC8vXG4gIC8vIGBgYGh0bWxcbiAgLy8gQWZ0ZXI6IDxib2R5IGNsYXNzPVwiYWJjXCI+XG4gIC8vIGBgYFxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgc3BlY2lmaWVkIGNsYXNzbmFtZSB0byB0aGUgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtsYXNzIChSZXF1aXJlZCkgVGhlIGNsYXNzbmFtZSB0byByZW1vdmUgZnJvbSB0aGUgZWxlbWVudC5cbiAgICogQHJldHVybnMgYm9vbFxuICAgKi9cbiAgcmVtb3ZlKGtsYXNzKSB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMubm9kZTtcblxuICAgIHJldHVybiBub2RlLmNsYXNzTGlzdC5yZW1vdmUoa2xhc3MpO1xuICB9XG5cbiAgLy8gKipFeGFtcGxlOioqXG4gIC8vXG4gIC8vIGBgYGh0bWxcbiAgLy8gQmVmb3JlOiA8Ym9keSBjbGFzcz1cImFiY1wiPlxuICAvLyBgYGBcbiAgLy9cbiAgLy8gYGBgamF2YXNjcmlwdFxuICAvLyAkKGRvY3VtZW50LmJvZHkpLnJlcGxhY2UoJ2FiYycsICd4eXonKTtcbiAgLy8gYGBgXG4gIC8vXG4gIC8vIGBgYGh0bWxcbiAgLy8gQWZ0ZXI6IDxib2R5IGNsYXNzPVwieHl6XCI+XG4gIC8vIGBgYFxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHNwZWNpZmllZCBjbGFzc25hbWUgb24gdGhlIGVsZW1lbnQgd2l0aCBhbm90aGVyIGNsYXNzbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtsYXNzMSAoUmVxdWlyZWQpIFRoZSBjbGFzc25hbWUgdG8gcmVtb3ZlIGZyb20gdGhlIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrbGFzczIgKFJlcXVpcmVkKSBUaGUgY2xhc3NuYW1lIHRvIGFkZCB0byB0aGUgZWxlbWVudC5cbiAgICogQHJldHVybnMgYm9vbFxuICAgKi9cbiAgcmVwbGFjZShrbGFzczEsIGtsYXNzMikge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLm5vZGU7XG5cbiAgICByZXR1cm4gbm9kZS5jbGFzc0xpc3QucmVwbGFjZShrbGFzczEsIGtsYXNzMik7XG4gIH1cblxuICAvLyAqKkV4YW1wbGU6KipcbiAgLy9cbiAgLy8gYGBgaHRtbFxuICAvLyBCZWZvcmU6IDxib2R5IGNsYXNzPVwiYWJjIGRlZlwiPlxuICAvLyBgYGBcbiAgLy9cbiAgLy8gYGBgamF2YXNjcmlwdFxuICAvLyAkKGRvY3VtZW50LmJvZHkpLnRvZ2dsZSgnZGVmJyk7XG4gIC8vIGBgYFxuICAvL1xuICAvLyBgYGBodG1sXG4gIC8vIEFmdGVyOiA8Ym9keSBjbGFzcz1cImFiY1wiPlxuICAvLyBgYGBcbiAgLy9cbiAgLy8gYGBgamF2YXNjcmlwdFxuICAvLyAkKGRvY3VtZW50LmJvZHkpLnRvZ2dsZSgnZGVmJyk7XG4gIC8vIGBgYFxuICAvL1xuICAvLyBgYGBodG1sXG4gIC8vIEFmdGVyLUFmdGVyOiA8Ym9keSBjbGFzcz1cImFiYyBkZWZcIj5cbiAgLy8gYGBgXG4gIC8qKlxuICAgKiBUb2dnbGVzIGEgY2xhc3NuYW1lIG9uIHRoZSBlbGVtZW50LiBSZXR1cm5zIGEgYm9vbGVhbiB2YWx1ZSwgYHRydWVgIG9yXG4gICAqIGBmYWxzZWAsIGluZGljYXRpbmcgd2hldGhlciBvciBub3QgYGtsYXNzYCBpcyBpbiB0aGUgbGlzdCBvZiBjbGFzc25hbWVzXG4gICAqIGFmdGVyIHRoZSBjYWxsIG9yIG5vdC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtsYXNzIChSZXF1aXJlZCkgVGhlIGNsYXNzbmFtZSB0byB0b2dnbGUgb24gdGhlIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIGJvb2xcbiAgICovXG4gIHRvZ2dsZShrbGFzcykge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLm5vZGU7XG5cbiAgICByZXR1cm4gbm9kZS5jbGFzc0xpc3QudG9nZ2xlKGtsYXNzKTtcbiAgfVxuXG4gIC8vIC0tLS1cbiAgLy8gIyMjIEV2ZW50c1xuXG4gIC8vICoqRXhhbXBsZToqKlxuICAvL1xuICAvLyBgYGBqYXZhc2NyaXB0XG4gIC8vIGNvbnN0IGRsZyA9IERlbGVnYXRlO1xuICAvL1xuICAvLyAvLyBBZGQgZXZlbnRcbiAgLy8gY29uc3QgZXZ0ID0gJChkb2N1bWVudC5ib2R5KS5vbignY2xpY2snLFxuICAvLyAgIGRsZygnLmV4YW1wbGUnLCBldnQgPT4ge1xuICAvLyAgICAgJChldnQudGFyZ2V0KS50b2dnbGUoJ2VuYWJsZWQnKVxuICAvLyAgIH0pXG4gIC8vICk7XG4gIC8vXG4gIC8vIC8vIFJlbW92ZSBldmVudFxuICAvLyBldnQucmVtb3ZlKCk7XG4gIC8vIGBgYFxuICAvKipcbiAgICogQSB3cmFwcGVyIGZvciBhZGRFdmVudExpc3RlbmVyIHdpdGggYG9uY2U6IGZhbHNlYC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgQSB2YWxpZCBldmVudCB0eXBlLCBsaWtlIGBjbGlja2AuIFNlZVxuICAgKiAgICAgPGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cz4gZm9yIG1vcmVcbiAgICogICAgIGluZm9ybWF0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbnxEZWxlZ2F0ZX0gZm4gQSBjYWxsYmFjayBmdW5jdGlvbiB0byBleGVjdXRlLCBvciBhXG4gICAqICAgICBzdHJpbmcgY29udGFpbmluZyB0aGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24uXG4gICAqIEByZXR1cm5zIEV2ZW50UG9pbnRlclxuICAgKi9cbiAgb24odHlwZSwgZm4pIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5ub2RlO1xuXG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZuLCB7b25jZTogZmFsc2V9KTtcblxuICAgIHJldHVybiB7XG4gICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIHtvbmNlOiBmYWxzZX0pO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG5cbi8vIC0tLS1cbi8vICMjIERRdWVyeVxuLy9cbi8vIE1haW4gaW50ZXJmYWNlIGZvciBEUXVlcnkuXG4vKipcbiAqIE1haW4gaW50ZXJmYWNlIGZvciBEUXVlcnkuXG4gKlxuICogRnVuZGFtZW50YWxseSwgYERRdWVyeWAgaXMgYSB3cmFwcGVyIGFyb3VuZCBgcXVlcnlTZWxlY3RvckFsbCgpYCwgZXhjZXB0IHRoYXRcbiAqIHRoZSBtYXRjaGVzIGFyZSBhbHNvIHdyYXBwZWQgd2l0aCBgRFF1ZXJ5Tm9kZWAuIFRoaXMgYWxsb3dzIHVzIHRvIGV4dGVuZCB0aGVcbiAqIGZ1bmN0aW9uYWxpdHkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8RWxlbWVudH0gc2VsZWN0b3IgKFJlcXVpcmVkKSBFaXRoZXIgYSAoc3RyaW5nKSBDU1Mgc2VsZWN0b3JcbiAqICAgICAod2hpY2ggd2lsbCBhbHdheXMgcmVzdWx0IGluIGFuIGFycmF5IG9mIGBEUXVlcnlOb2RlYCBvYmplY3RzKSwgb3IgYSBET01cbiAqICAgICBgRWxlbWVudGAgb2JqZWN0ICh3aGljaCB3aWxsIGFsd2F5cyByZXN1bHQgaW4gYSBzaW5nbGUgYERRdWVyeU5vZGVgXG4gKiAgICAgZWxlbWVudCkuIFNlZSA8aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQ+XG4gKiAgICAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW0gKE9wdGlvbmFsKSBhIERPTSBgRWxlbWVudGAgb2JqZWN0IHdoaWNoIHNob3VsZCBiZSB1c2VkXG4gKiAgICAgYXMgdGhlIHBhcmVudC1tb3N0IGVsZW1lbnQgZm9yIHRoZSBxdWVyeS4gU2VlXG4gKiAgICAgPGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50PiBmb3IgbW9yZVxuICogICAgIGluZm9ybWF0aW9uLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBgZG9jdW1lbnRgLCB3aGljaCByZXNvbHZlcyB0byB0aGVcbiAqICAgICBgPGh0bWw+YCBlbGVtZW50LlxuICogQHJldHVybnMgW11EUXVlcnlOb2RlfERRdWVyeU5vZGVcbiAqL1xuZnVuY3Rpb24gRFF1ZXJ5KHNlbGVjdG9yLCBlbGVtKSB7XG4gIC8vIElmIHdlIHJlY2VpdmVkIGEgRE9NIGBFbGVtZW50YCBvYmplY3QsIGp1c3Qgd3JhcCBpdCBhbmQgcmV0dXJuIGl0LlxuICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgcmV0dXJuIG5ldyBEUXVlcnlOb2RlKHNlbGVjdG9yKTtcbiAgfVxuXG4gIC8vIElmIHRoZSBgZWxlbWAgcGFyYW1ldGVyIGlzIG5vdCBwcm92aWRlZCwgdXNlIGBkb2N1bWVudGAgKGA8aHRtbD5gKWFzIHRoZVxuICAvLyBkZWZhdWx0IHJvb3QgZWxlbWVudCBmb3IgdGhlIHF1ZXJ5LiBUYWtlIHRoZSByZXN1bHRzLCB3cmFwIGVhY2ggb25lIHdpdGhcbiAgLy8gYERRdWVyeU5vZGVgLCBhbmQgcmV0dXJuIHRoZSBjb2xsZWN0aW9uLlxuICBjb25zdCBjb2xsZWN0aW9uID0gW107XG5cbiAgZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG4gIGlmIChlbGVtID09PSBkb2N1bWVudCkge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpLmZvckVhY2goKGVlKSA9PiB7XG4gICAgICBjb2xsZWN0aW9uLnB1c2gobmV3IERRdWVyeU5vZGUoZWUpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICB9XG5cbiAgLy8gSWYgdGhlIGBlbGVtYCBwYXJhbWV0ZXIgX2lzXyBwcm92aWRlZCAod2hpY2ggX21heV8gYmUgYW4gYXJyYXkgb2YgcmVzdWx0cyksXG4gIC8vIGl0ZXJhdGUgb3ZlciBlYWNoIG9mIHRoZSByZXN1bHRzLCB0aGVuIHVzZSBgOnNjb3BlYCBpbiB0aGUgc2VsZWN0b3IgdG9cbiAgLy8gZmlsdGVyIHRvIG9ubHkgY2hpbGRyZW4gb2YgYGVsZW1gIChhcyBvcHBvc2VkIHRvIGBkb2N1bWVudGApLiBUaGlzIHdpbGxcbiAgLy8gZ2l2ZSB1cyB0aGUgcmVzdWx0cyB3ZSBleHBlY3QgaW5zdGVhZCBvZiB0b28gbWFueSByZXN1bHRzLlxuICBzZWxlY3RvciA9IFsnOnNjb3BlJywgc2VsZWN0b3JdLmpvaW4oJyAnKTtcblxuICBpZiAodHlwZW9mIGVsZW1bU3ltYm9sLml0ZXJhdG9yXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGVsZW0gPSBbZWxlbV07XG4gIH1cblxuICBlbGVtLmZvckVhY2goKGUpID0+IHtcbiAgICBlLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpLmZvckVhY2goKGVlKSA9PiB7XG4gICAgICBjb2xsZWN0aW9uLnB1c2gobmV3IERRdWVyeU5vZGUoZWUpKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbi8vIERlZmF1bHQgZXhwb3J0IGZvciB0aGUgcGFja2FnZS5cbmV4cG9ydCBkZWZhdWx0IERRdWVyeTtcbiIsIi8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2JydW5vc2NvcGVsbGl0aS9kZWxlZ2F0ZSB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vLyBSZXZlcnNlZCB0aGUgYChzZWxlY3RvciwgZm4pYCBwYXJhbWV0ZXJzLlxuXG4vLyAqKkV4YW1wbGU6Kipcbi8vXG4vLyBgYGBqYXZhc2NyaXB0XG4vLyBjb25zdCBkbGcgPSBEZWxlZ2F0ZTtcbi8vXG4vLyAvLyBBZGQgZXZlbnRcbi8vIGNvbnN0IGV2dCA9ICQoZG9jdW1lbnQuYm9keSkub24oJ2NsaWNrJywgZGxnKCcjdGVzdCcsIGUgPT4ge1xuLy8gICBlLmNsYXNzTGlzdC50b2dnbGUoJ2VuYWJsZWQnKTtcbi8vIH0pKTtcbi8vXG4vLyAvLyBSZW1vdmUgZXZlbnRcbi8vIGV2dC5yZW1vdmUoKTtcbi8vIGBgYFxuLyoqXG4gKiBBc3N1cmUgdGhhdCB0aGUgcHJvdmlkZWQgZnVuY3Rpb24sIGBmbmAsIGlzIGV4ZWN1dGVkIG9ubHkgd2hlbiBpdHMgd3JhcHBpbmdcbiAqIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBhIHRhcmdldCB0aGF0IG1hdGNoZXMgdGhlIGBzZWxlY3RvcmAuXG4gKlxuICogQG5hbWUgZGVsZWdhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbn0gZm5cbiAqXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbmNvbnN0IERlbGVnYXRlID0gKHNlbGVjdG9yLCBmbikgPT4gZnVuY3Rpb24gaGFuZGxlcihldmVudCkge1xuICBjb25zdCBtYXRjaGluZ0VsID0gbWF0Y2hlcyhldmVudC50YXJnZXQsIHNlbGVjdG9yLCB0aGlzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXNcblxuICBpZiAobWF0Y2hpbmdFbCAhPT0gbnVsbCkge1xuICAgIGZuLmNhbGwobWF0Y2hpbmdFbCwgZXZlbnQpO1xuICB9XG59O1xuXG4vLyBEZWZhdWx0IGV4cG9ydCBmb3IgdGhlIHBhY2thZ2UuXG5leHBvcnQgZGVmYXVsdCBEZWxlZ2F0ZTtcblxuLy8gUHJpdmF0ZSBtZXRob2QuIE5vdCBleHBvc2VkIHRvIHRoZSBwdWJsaWMuXG4vKipcbiAqIEBuYW1lIG1hdGNoZXNcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IG1hdGNoZXMgPSAodGFyZ2V0LCBzZWxlY3RvciwgYm91bmRFbGVtZW50KSA9PiB7XG4gIGlmICh0YXJnZXQgPT09IGJvdW5kRWxlbWVudCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHRhcmdldC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICBpZiAodGFyZ2V0LnBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gbWF0Y2hlcyh0YXJnZXQucGFyZW50Tm9kZSwgc2VsZWN0b3IsIGJvdW5kRWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG4iLCIvLyBWRE9NIGlzIGFuIHVwZGF0ZWQgRVM2KyB2ZXJzaW9uIG9mIGEgVmlydHVhbCBET00gaW1wbGVtZW50YXRpb24gSSBidWlsdCBpblxuLy8gMjAwOCBiZWZvcmUgVmlydHVhbCBET00gZXZlbiBoYWQgYSBuYW1lIHlldC5cbi8vXG4vLyBUaGUgdGVybSDigJxWaXJ0dWFsIERPTeKAnSByZWZlcnMgdG8gcmVhbCBET00gbm9kZXMgdGhhdCBleGlzdCBpbiBtZW1vcnksIGJ1dCBhcmVcbi8vIG5vdCBhdHRhY2hlZCB0byB0aGUgX2xpdmVfIHRyZWUuIFRoaXMgbWVhbnMgdGhhdCB0aGV5IGNhbiBiZSBtb2RpZmllZCBhbmRcbi8vIG1hbmlwdWxhdGVkIGluLW1lbW9yeSB3aXRob3V0IHRyaWdnZXJpbmcgcmVwYWludHMgYW5kIHJlZmxvd3MgaW4gdGhlIGJyb3dzZXJcbi8vIGVuZ2luZSwgbWFraW5nIG1vZGlmaWNhdGlvbnMgZHJhbWF0aWNhbGx5IGZhc3Rlci5cbi8vXG4vLyBCeSBsZXZlcmFnaW5nIGBEb2N1bWVudEZyYWdtZW50YCBvYmplY3RzIHVuZGVyIHRoZSBob29kLCB3ZSBjYW4gY29sbGVjdCBvbmVcbi8vIG9yIG1vcmUgc2libGluZyBlbGVtZW50cyB0b2dldGhlciB3aGljaCBkbyBub3QgaGF2ZSBhIHNoYXJlZCBwYXJlbnQgbm9kZVxuLy8gdW50aWwgdGhleSBhcmUgaW5qZWN0ZWQgaW50byB0aGUgbGl2ZSBET00uIFRoaXMgaXMgZnVuZGFtZW50YWxseSB0aGUgc2FtZSB3YXlcbi8vIHRoYXQgYFJlYWN0LmNyZWF0ZUVsZW1lbnQoKWAgd29ya3MsIGFuZCB0aGUgc3ludGF4IGlzIHZlcnkgc2ltaWxhci5cbi8vXG4vLyAqKkV4YW1wbGVzOioqXG4vL1xuLy8gRnJvbSB0aGUgPGh0dHBzOi8vcmVhY3Rqcy5vcmc+IGhvbWVwYWdlLCB0aGlzIGV4YW1wbGUgZ2VuZXJhdGVzIGEgbmV3IERPTVxuLy8gZWxlbWVudCBhbmQgYXBwZW5kcyBpdCB0byB0aGUgbGl2ZSBET00uXG4vL1xuLy8gYGBgamF2YXNjcmlwdFxuLy8gY2xhc3MgSGVsbG9NZXNzYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbi8vICAgcmVuZGVyKCkge1xuLy8gICAgIHJldHVybiAoXG4vLyAgICAgICA8ZGl2PlxuLy8gICAgICAgICBIZWxsbyB7dGhpcy5wcm9wcy5uYW1lfVxuLy8gICAgICAgPC9kaXY+XG4vLyAgICAgKTtcbi8vICAgICAvLyBvci4uLlxuLy8gICAgIC8vIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuLy8gICAgIC8vICAgXCJkaXZcIixcbi8vICAgICAvLyAgIG51bGwsXG4vLyAgICAgLy8gICBcIkhlbGxvIFwiLFxuLy8gICAgIC8vICAgdGhpcy5wcm9wcy5uYW1lXG4vLyAgICAgLy8gKTtcbi8vICAgfVxuLy8gfVxuLy9cbi8vIFJlYWN0RE9NLnJlbmRlcihcbi8vICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbi8vICAgICBIZWxsb01lc3NhZ2UsIHsgbmFtZTogXCJUYXlsb3JcIiB9XG4vLyAgICksXG4vLyAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoZWxsby1leGFtcGxlJylcbi8vICk7XG4vLyBgYGBcbi8vXG4vLyBIZXJlJ3MgYSAocm91Z2hseSkgZXF1aXZhbGVudCBleGFtcGxlIHVzaW5nIFZET00sIGV4Y2VwdCB0aGF0IHRoZXJlIGFyZSBub1xuLy8gX21hZ2ljYWxfIGBwcm9wc2AgYmVjYXVzZSB0aGVyZSBhcmUgbm8gYGNvbXBvbmVudHNgLiBKdXN0IHN0YW5kYXJkIGZ1bmN0aW9uc1xuLy8gYW5kIHZhcmlhYmxlcy5cbi8vXG4vLyBgYGBqYXZhc2NyaXB0XG4vLyBjb25zdCBfID0gVkRPTSxcbi8vICAgICAgICQgPSBEUXVlcnk7XG4vL1xuLy8gZnVuY3Rpb24gSGVsbG9NZXNzYWdlKHByb3BzKSB7XG4vLyAgIHJldHVybiBgXG4vLyAgICAgPGRpdj5cbi8vICAgICAgIEhlbGxvICR7cHJvcHMubmFtZX1cbi8vICAgICA8L2Rpdj5cbi8vICAgYDtcbi8vICAgLy8gb3IuLi5cbi8vICAgLy8gcmV0dXJuIF8oJ2RpdicpLmgoYEhlbGxvICR7cHJvcHMubmFtZX1gKTtcbi8vIH1cbi8vXG4vLyAkKCcjaGVsbG8tZXhhbXBsZScpWzBdLmFwcGVuZChcbi8vICAgSGVsbG9NZXNzYWdlKHsgbmFtZTogXCJUYXlsb3JcIiB9KVxuLy8gKTtcbi8vIGBgYFxuLy9cbi8vIFZET00gc2l0cyBtdWNoIOKAnGNsb3NlciB0byB0aGUgbWV0YWzigJ0sIHdoaWNoIG1ha2VzIGl0IChhKSBmYXN0ZXIsIGFuZCAoYilcbi8vIHNtYWxsZXIuIFdoaWxlIGl0IGxhY2tzIHNvbWUgb2YgdGhlIG5pY2V0aWVzIGxpa2UgSlNYLCB5b3UgY2FuIHN0aWxsIHVzZVxuLy8gYGlubmVySFRNTGAgd2hpY2ggZ2V0cyB5b3UgX21vc3RfIG9mIHRoZSB3YXkgdGhlcmUgYXQgdmVyeSBsaXR0bGUgY29zdC5cbi8vXG4vLyAtLS0tXG5cbmNvbnN0IFggPSBmdW5jdGlvbihlbGVtLCBhdHRyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXMsXG4gICAgICBSRV9JRF9PUl9DTEFTUyA9IC9bXFwuI10vdSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICAgICAgUkVfQ1NTX0FUVFJTID0gL1xcWyhbXlxcXV0rKVxcXS9ndSxcbiAgICAgIEFSUl9ORVhUID0gMTtcblxuICAgIGxldCBrZXksIGssIG1hdGNoO1xuXG4gICAgYXR0ciA9IGF0dHIgfHwge307XG5cbiAgICAvLyBQYXJzZSB0aGUgQ1NTLXN0eWxlIG5vdGF0aW9uLlxuICAgIGZ1bmN0aW9uIG5vdGF0aW9uKCkge1xuICAgICAgY29uc3QgYXR0ID0ge1xuICAgICAgICAgIGNsYXNzOiBbXSxcbiAgICAgICAgICBpZDogJycsXG4gICAgICAgIH0sXG4gICAgICAgIGt2UGFpciA9IFtdO1xuXG4gICAgICBpZiAoIVJFX0lEX09SX0NMQVNTLnRlc3QoZWxlbSkgJiYgIVJFX0NTU19BVFRSUy50ZXN0KGVsZW0pKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cblxuICAgICAgLy8gQ29sbGVjdCBhbGwgb2YgdGhlIGBbaz12XWAgYmxvY2tzLlxuICAgICAgd2hpbGUgKChtYXRjaCA9IFJFX0NTU19BVFRSUy5leGVjKGVsZW0pKSAhPT0gbnVsbCkge1xuICAgICAgICBrdlBhaXIucHVzaChtYXRjaFsxXS5zcGxpdCgnPScpKTtcbiAgICAgIH1cblxuICAgICAgZWxlbSA9IGVsZW0ucmVwbGFjZShSRV9DU1NfQVRUUlMsICcnKTtcbiAgICAgIGNvbnN0IHBpZWNlcyA9IGVsZW0uc3BsaXQoUkVfSURfT1JfQ0xBU1MpLFxuICAgICAgICBlbGVtVHlwZSA9IHBpZWNlcy5zaGlmdCgpO1xuXG4gICAgICBrdlBhaXIuZm9yRWFjaCgodmFsLCBpZHgsIGFycikgPT4ge1xuICAgICAgICBhdHRbYXJyW2lkeF1bMF1dID0gYXJyW2lkeF1bMV07XG4gICAgICB9KTtcblxuICAgICAgLy8gU3VwcG9ydCBDU1MvalF1ZXJ5LXN0eWxlIG5vdGF0aW9uIGZvciBnZW5lcmF0aW5nIGVsZW1lbnRzIHdpdGggSURzIGFuZCBjbGFzc25hbWVzLlxuICAgICAgbGV0IHBvcyA9IGVsZW1UeXBlLmxlbmd0aDtcbiAgICAgIGNvbnN0IGNsYXNzZXMgPSBhdHRbJ2NsYXNzJ107XG5cbiAgICAgIHBpZWNlcy5mb3JFYWNoKCh2YWwsIGlkeCwgYXJyKSA9PiB7XG4gICAgICAgIGlmIChlbGVtW3Bvc10gPT09ICcjJykge1xuICAgICAgICAgIGF0dC5pZCA9IHZhbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbGFzc2VzLnB1c2godmFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvcyArPSBhcnJbaWR4XS5sZW5ndGggKyBBUlJfTkVYVDtcbiAgICAgIH0pO1xuXG4gICAgICBhdHRbJ2NsYXNzJ10gPSBjbGFzc2VzO1xuICAgICAgaWYgKCFhdHRbJ2NsYXNzJ10ubGVuZ3RoKSB7XG4gICAgICAgIGRlbGV0ZSBhdHRbJ2NsYXNzJ107XG4gICAgICB9XG5cbiAgICAgIGlmIChhdHRbJ2lkJ10gPT09ICcnKSB7XG4gICAgICAgIGRlbGV0ZSBhdHRbJ2lkJ107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhdHQ7XG4gICAgfVxuXG4gICAgLy8gTWVyZ2Ugb3B0aW9ucyBpbnRvIGEgY29uZ2xvbW8taGFzaCFcbiAgICBhdHRyID0gT2JqZWN0LmFzc2lnbihhdHRyLCBub3RhdGlvbigpKTtcblxuICAgIC8vIENvbnN0cnVjdCB0aGUgZWxlbWVudCwgbG9vcCB0aHJvdWdoIHRoZSBsaXN0IG9mIGF0dHJpYnV0ZXMgYW5kIGFkZCB0aGVtIHRvIHRoZSBub2RlLlxuICAgIGlmIChSRV9JRF9PUl9DTEFTUy50ZXN0KGVsZW0pKSB7XG4gICAgICBzZWxmLmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW0uc3BsaXQoUkVfSURfT1JfQ0xBU1MpLnNoaWZ0KCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW0pO1xuICAgIH1cblxuICAgIGlmIChhdHRyKSB7XG4gICAgICBmb3IgKGtleSBpbiBhdHRyKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXR0ciwga2V5KSkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHR5cGVvZiBhdHRyW2tleV0gPT09ICdvYmplY3QnXG4gICAgICAgICAgJiYgdHlwZW9mIGF0dHJba2V5XS5sZW5ndGggPT09ICdudW1iZXInXG4gICAgICAgICAgJiYgdHlwZW9mIGF0dHJba2V5XS5zcGxpY2UgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGF0dHJba2V5XSA9IGF0dHJba2V5XS5qb2luKCcgJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGtleS50b1N0cmluZygpID09PSAnY2xhc3MnKSB7XG4gICAgICAgICAgICBzZWxmLmUuY2xhc3NOYW1lID0gYXR0cltrZXldO1xuXG4gICAgICAgICAgLy8gU3VwcG9ydCBgZGF0YToge31gIGZvciBkYXRhIGF0dHJpYnV0ZXNcbiAgICAgICAgICB9IGVsc2UgaWYgKGtleS50b1N0cmluZygpID09PSAnZGF0YScpIHtcbiAgICAgICAgICAgIGZvciAoayBpbiBhdHRyW2tleV0pIHtcbiAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhdHRyW2tleV0sIGspKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5lLnNldEF0dHJpYnV0ZShgZGF0YS0keyBrIH1gLCBhdHRyW2tleV1ba10pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYuZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyW2tleV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBjaGlsZCBub2Rlcy5cbiAgICBzZWxmLl8gPSAob2JqKSA9PiB7XG4gICAgLy8gSWYgdGhlIG9iamVjdCBpc24ndCBhbiBhcnJheSwgY29udmVydCBpdCB0byBhbiBhcnJheSB0byBtYWludGFpbiBhIHNpbmdsZSBjb2RlcGF0aCBiZWxvdy5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgIG9iaiA9IFtvYmpdO1xuICAgICAgfVxuXG4gICAgICAvLyBMb29wIHRocm91Z2ggdGhlIGluZGV4ZWQgYXJyYXkgb2YgY2hpbGRyZW4uIElmIHRoZSBub2RlIGlzIGEgYFZET01gIG9iamVjdCwgY29udmVydCBpdCB0b1xuICAgICAgLy8gRE9NIGFuZCBhcHBlbmQgaXQuIE90aGVyd2lzZSwgYXNzdW1lIGl0J3MgYSByZWFsIERPTSBub2RlLlxuICAgICAgZm9yIChsZXQgaSA9IDAsIG1heCA9IG9iai5sZW5ndGg7IGkgPCBtYXg7IGkgKyspIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYmpbaV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIG9ialtpXS5kb20gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgc2VsZi5lLmFwcGVuZENoaWxkKG9ialtpXS5kb20oKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5lLmFwcGVuZENoaWxkKG9ialtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcblxuICAgIC8vIFNldCB0aGUgSFRNTFxuICAgIHNlbGYuaCA9IChzdHIsIHJlcGxhY2UpID0+IHtcbiAgICAvLyBEZXRlcm1pbmUgdGhlIGRlZmF1bHQgdmFsdWUgZm9yIGByZXBsYWNlYC5cbiAgICAgIHJlcGxhY2UgPSByZXBsYWNlIHx8IGZhbHNlO1xuXG4gICAgICAvLyBTZXQgdGhlIHZhbHVlIHdpdGggaW5uZXJIVE1MLlxuICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgc2VsZi5lLmlubmVySFRNTCA9IHN0cjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuZS5pbm5lckhUTUwgKz0gc3RyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9O1xuXG4gICAgLy8gU2V0IHRoZSB0ZXh0XG4gICAgc2VsZi50ID0gKHN0cikgPT4ge1xuICAgIC8vIE5vIHBhcmFtZXRlcnM/IFJlYWQgdGhlIHZhbHVlIGluc3RlYWQuIEFsaWFzIGZvciBfX3QoKS5cbiAgICAgIGlmICh0eXBlb2Ygc3RyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gc2VsZi5fX3QoKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2V0IHRoZSB2YWx1ZVxuICAgICAgY29uc3QgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHN0cik7XG5cbiAgICAgIHNlbGYuZS5hcHBlbmRDaGlsZCh0ZXh0KTtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcblxuICAgIC8vIEdldCBET01FbGVtZW50XG4gICAgc2VsZi5kb20gPSAoKSA9PiBzZWxmLmU7XG5cbiAgICAvLyBHZXQgYXMgSFRNTFxuICAgIHNlbGYudG9TdHJpbmcgPSAoKSA9PiB7XG4gICAgICBjb25zdCB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgIHQuYXBwZW5kQ2hpbGQoc2VsZi5lKTtcblxuICAgICAgcmV0dXJuIHQuaW5uZXJIVE1MO1xuICAgIH07XG5cbiAgICAvLyBHZXQgYXMgdGV4dFxuICAgIHNlbGYuX190ID0gKCkgPT4ge1xuICAgICAgY29uc3QgdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICB0LmFwcGVuZENoaWxkKHNlbGYuZSk7XG5cbiAgICAgIHJldHVybiB0LnRleHRDb250ZW50IHx8IHQuaW5uZXJUZXh0O1xuICAgIH07XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcblxuICAvLyBQcmUtaW5zdGFudGlhdGUgdGhlIGNsYXNzIG9uIGVhY2ggY2FsbCBzbyB0aGF0IHlvdSBuZXZlciBuZWVkIHRvIHVzZSBgbmV3YC5cbiAgVkRPTSA9IChlbGVtLCBhdHRyKSA9PiBuZXcgWChlbGVtLCBhdHRyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5WRE9NLkRPTSA9ICguLi5ub2RlcykgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gIC8vIENyZWF0ZSBhIGRvY3VtZW50IGZyYWdtZW50LiBHcmFiIGFuZCBsb29wIHRocm91Z2ggdGhlIGluLW1lbW9yeSBET00gbm9kZXMsXG4gIC8vIGFuZCBfbW92ZV8gdGhlbSB0byB0aGUgYERvY3VtZW50RnJhZ21lbnRgLlxuICBjb25zdCBmID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgIG4gPSBuZXcgWCgnZGl2JykuXyhub2RlcykuXG4gICAgICBkb20oKS5jaGlsZE5vZGVzO1xuXG4gIHdoaWxlIChuLmxlbmd0aCkge1xuICAgIGYuYXBwZW5kQ2hpbGQoblswXSk7XG4gIH1cblxuICByZXR1cm4gZjtcbn07XG5cblZET00udCA9IHN0ciA9PiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzdHIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblZET00uaCA9IChzdHIpID0+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICBjb25zdCBmID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgIG4gPSBuZXcgWCgnZGl2JykuaChzdHIpLlxuICAgICAgZG9tKCkuY2hpbGROb2RlcztcblxuICB3aGlsZSAobi5sZW5ndGgpIHtcbiAgICBmLmFwcGVuZENoaWxkKG5bMF0pO1xuICB9XG5cbiAgcmV0dXJuIGY7XG59O1xuXG4vLyBEZWZhdWx0IGV4cG9ydCBmb3IgdGhlIHBhY2thZ2UuXG5leHBvcnQgZGVmYXVsdCBWRE9NO1xuIl0sIm5hbWVzIjpbXSwidmVyc2lvbiI6MywiZmlsZSI6Ii4vZGlzdC9pbmRleC5qcy5tYXAifQ=="],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}