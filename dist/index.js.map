{"mappings":"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","sources":["dist/index.js"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $d06b2385a2707aa5$exports = {};\nclass $d06b2385a2707aa5$var$DQueryNode {\n    /**\n   * DQueryNode wraps DOM Element objects with enhanced functionality.\n   *\n   * @param {Element} node A DOM Element object, which represents an HTML tag.\n   */ constructor(node){\n        this.node = node;\n    }\n    /**\n   * Gets the underlying native DOM Element object.\n   *\n   * @returns Element\n   */ get() {\n        return this.node;\n    }\n    /**\n   * Gets the nearest ancestor which matches a selector. If no selector is\n   * given, returns parent.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ ancestor(selector) {\n        selector = selector || '';\n        if (selector === '') return this.parent();\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.closest(selector));\n    }\n    /**\n   * Gets the immediate parent element.\n   *\n   * @returns DQueryNode\n   */ parent() {\n        if (!this.node.parentNode) return null;\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.parentNode);\n    }\n    /**\n   * Gets all descendants which match a selector. If no selector is given,\n   * returns children.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQuery\n   */ descendants(selector) {\n        selector = selector || '';\n        if (selector === '') return this.children();\n        return new $d06b2385a2707aa5$var$DQuery(selector, this.node); // eslint-disable-line no-undef\n    }\n    /**\n   * Gets all immediate children which match a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns []DQueryNode\n   */ children(selector) {\n        selector = selector || '';\n        return Array.from(this.node.childNodes).filter((e)=>e.nodeType === Node.ELEMENT_NODE\n        ).filter((e)=>selector !== '' && e.matches(selector) || selector === ''\n        ).map((e)=>new $d06b2385a2707aa5$var$DQueryNode(e)\n        );\n    }\n    /**\n   * Gets all sibling elements of the immediate parent which match a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns []DQueryNode\n   */ siblings(selector) {\n        selector = selector || '';\n        if (!this.node.parentNode) return [];\n        let sibling = this.node.parentNode.firstChild;\n        const siblings = [];\n        while(sibling){\n            if (sibling !== this.node) {\n                if (sibling.nodeType === Node.ELEMENT_NODE && (selector !== '' && sibling.matches(selector) || selector === '')) siblings.push(new $d06b2385a2707aa5$var$DQueryNode(sibling));\n            }\n            sibling = sibling.nextSibling;\n        }\n        return siblings;\n    }\n    /**\n   * Gets the immediately-next sibling which matches a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ next(selector) {\n        selector = selector || '';\n        let next = this.node.nextSibling;\n        while(next){\n            if (next.nodeType === Node.ELEMENT_NODE && (selector !== '' && next.matches(selector) || selector === '')) return new $d06b2385a2707aa5$var$DQueryNode(next);\n            next = next.nextSibling;\n        }\n        return null;\n    }\n    /**\n   * Gets the immediately-previous sibling which matches a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ prev(selector) {\n        selector = selector || '';\n        let prev = this.node.previousSibling;\n        while(prev){\n            if (prev.nodeType === Node.ELEMENT_NODE && (selector !== '' && prev.matches(selector) || selector === '')) return new $d06b2385a2707aa5$var$DQueryNode(prev);\n            prev = prev.previousSibling;\n        }\n        return null;\n    }\n    /**\n   * Prepends the provided element to the selected node, then returns a pointer\n   * to the prepended node in the DOM.\n   *\n   * @param {Element} element (Required) The DOM element to prepend.\n   * @returns DQueryNode\n   */ prepend(element) {\n        if (typeof element.dom !== 'undefined') this.node.insertAdjacentElement('afterbegin', element.dom());\n        else this.node.insertAdjacentElement('afterbegin', element);\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.childNodes[0]);\n    }\n    /**\n   * Appends the provided element to the selected node, then returns a pointer\n   * to the appended node in the DOM.\n   *\n   * @param {Element} element (Required) The DOM element to append.\n   * @returns DQueryNode\n   */ append(element) {\n        if (typeof element.dom !== 'undefined') this.node.insertAdjacentElement('beforeend', element.dom());\n        else this.node.insertAdjacentElement('beforeend', element);\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.childNodes[this.node.childNodes.length - 1]);\n    }\n    /**\n   * Inserts the provided element before the selected node, then returns a\n   * pointer to the added node in the DOM.\n   *\n   * @param {Element} element (Required) The DOM element to insert before.\n   * @returns DQueryNode\n   */ before(element) {\n        if (typeof element.dom !== 'undefined') this.node.before(element.dom());\n        else this.node.before(element);\n        return this.prev();\n    }\n    /**\n   * Inserts the provided element after the selected node, then returns a\n   * pointer to the added node in the DOM.\n   *\n   * @param {Element} element (Required) The DOM element to insert after.\n   * @returns DQueryNode\n   */ after(element) {\n        if (typeof element.dom !== 'undefined') this.node.after(element.dom());\n        else this.node.after(element);\n        return this.next();\n    }\n    /**\n   * A wrapper for addEventListener with `once: false`.\n   *\n   * @param {string} type A valid event type, like `click`. See\n   *     <https://developer.mozilla.org/en-US/docs/Web/Events> or more information.\n   * @param {string|function|Delegate} fn A callback function to execute, or a string\n   *     containing the name of the function.\n   * @returns EventPointer\n   */ on(type, fn) {\n        const node = this.node;\n        node.addEventListener(type, fn, {\n            once: false\n        });\n        return {\n            remove: function() {\n                node.removeEventListener(type, fn, {\n                    once: false\n                });\n            }\n        };\n    }\n}\nconst $d06b2385a2707aa5$var$DQuery = function(selector, elem) {\n    if (selector instanceof Element) return new $d06b2385a2707aa5$var$DQueryNode(selector);\n    const collection = [];\n    elem = elem || document;\n    if (elem === document) {\n        document.querySelectorAll(selector).forEach((ee)=>{\n            collection.push(new $d06b2385a2707aa5$var$DQueryNode(ee));\n        });\n        return collection;\n    }\n    selector = [\n        ':scope',\n        selector\n    ].join(' ');\n    if (typeof elem[Symbol.iterator] !== 'function') elem = [\n        elem\n    ];\n    elem.forEach((e)=>{\n        e.querySelectorAll(selector).forEach((ee)=>{\n            collection.push(new $d06b2385a2707aa5$var$DQueryNode(ee));\n        });\n    });\n    return collection;\n};\n$d06b2385a2707aa5$exports = $d06b2385a2707aa5$var$DQuery;\n\n\nvar $2d9f69bafd62bfe5$exports = {};\n/* Taken from https://github.com/brunoscopelliti/delegate under the MIT license.\n   Reversed the (selector, fn) parameters. */ /**\n * Assure that the provided function, `fn`, is executed only when its wrapping\n * function is called on a target that matches the `selector`.\n *\n * @name delegate\n * @param {string} selector\n * @param {function} fn\n *\n * @returns {function}\n */ const $2d9f69bafd62bfe5$var$Delegate = (selector, fn)=>function handler(event) {\n        const matchingEl = $2d9f69bafd62bfe5$var$matches(event.target, selector, this); // eslint-disable-line no-invalid-this\n        if (matchingEl !== null) fn.call(matchingEl, event);\n    }\n;\n$2d9f69bafd62bfe5$exports = $2d9f69bafd62bfe5$var$Delegate;\n/**\n * @name matches\n * @private\n */ const $2d9f69bafd62bfe5$var$matches = (target, selector, boundElement)=>{\n    if (target === boundElement) return null;\n    if (target.matches(selector)) return target;\n    if (target.parentNode) return $2d9f69bafd62bfe5$var$matches(target.parentNode, selector, boundElement);\n    return null;\n};\n\n\nvar $d0e0ac82cf77fdb6$exports = {};\nconst $d0e0ac82cf77fdb6$var$X = function(elem, attr) {\n    const self = this, RE_ID_OR_CLASS = /[\\.#]/u, RE_CSS_ATTRS = /\\[([^\\]]+)\\]/gu, ARR_NEXT = 1;\n    let key, k, match;\n    attr = attr || {\n    };\n    // Parse the CSS-style notation.\n    function notation() {\n        const att = {\n            class: [],\n            id: ''\n        }, kvPair = [];\n        if (!RE_ID_OR_CLASS.test(elem) && !RE_CSS_ATTRS.test(elem)) return {\n        };\n        // Collect all of the `[k=v]` blocks.\n        while((match = RE_CSS_ATTRS.exec(elem)) !== null)kvPair.push(match[1].split('='));\n        elem = elem.replace(RE_CSS_ATTRS, '');\n        const pieces = elem.split(RE_ID_OR_CLASS), elemType = pieces.shift();\n        kvPair.forEach((val, idx, arr)=>{\n            att[arr[idx][0]] = arr[idx][1];\n        });\n        // Support CSS/jQuery-style notation for generating elements with IDs and classnames.\n        let pos = elemType.length;\n        const classes = att['class'];\n        pieces.forEach((val, idx, arr)=>{\n            if (elem[pos] === '#') att.id = val;\n            else classes.push(val);\n            pos += arr[idx].length + ARR_NEXT;\n        });\n        att['class'] = classes;\n        if (!att['class'].length) delete att['class'];\n        if (att['id'] === '') delete att['id'];\n        return att;\n    }\n    // Merge options into a conglomo-hash!\n    attr = Object.assign(attr, notation());\n    // Construct the element, loop through the list of attributes and add them to the node.\n    if (RE_ID_OR_CLASS.test(elem)) self.e = document.createElement(elem.split(RE_ID_OR_CLASS).shift());\n    else self.e = document.createElement(elem);\n    if (attr) {\n        for(key in attr)if (Object.prototype.hasOwnProperty.call(attr, key)) {\n            if (typeof attr[key] === 'object' && typeof attr[key].length === 'number' && typeof attr[key].splice === 'function') attr[key] = attr[key].join(' ');\n            if (key.toString() === 'class') self.e.className = attr[key];\n            else if (key.toString() === 'data') {\n                for(k in attr[key])if (Object.prototype.hasOwnProperty.call(attr[key], k)) self.e.setAttribute(`data-${k}`, attr[key][k]);\n            } else self.e.setAttribute(key, attr[key]);\n        }\n    }\n    // Handle child nodes.\n    self._ = (obj)=>{\n        // If the object isn't an array, convert it to an array to maintain a single codepath below.\n        if (!Array.isArray(obj)) obj = [\n            obj\n        ];\n        /* Loop through the indexed array of children. If the node is a `VDOM` object, convert it to\n       DOM and append it. Otherwise, assume it's a real DOM node. */ for(let i = 0, max = obj.length; i < max; i++){\n            if (typeof obj[i] === 'undefined') break;\n            if (typeof obj[i].dom !== 'undefined') self.e.appendChild(obj[i].dom());\n            else self.e.appendChild(obj[i]);\n        }\n        return self;\n    };\n    // Set the HTML\n    self.h = (str, replace)=>{\n        // Determine the default value for `replace`.\n        replace = replace || false;\n        // Set the value with innerHTML.\n        if (replace) self.e.innerHTML = str;\n        else self.e.innerHTML += str;\n        return self;\n    };\n    // Set the text\n    self.t = (str)=>{\n        // No parameters? Read the value instead. Alias for __t().\n        if (typeof str === 'undefined') return self.__t();\n        // Set the value\n        const text = document.createTextNode(str);\n        self.e.appendChild(text);\n        return self;\n    };\n    // Get DOMElement\n    self.dom = ()=>self.e\n    ;\n    // Get as HTML\n    self.toString = ()=>{\n        const t = document.createElement('div');\n        t.appendChild(self.e);\n        return t.innerHTML;\n    };\n    // Get as text\n    self.__t = ()=>{\n        const t = document.createElement('div');\n        t.appendChild(self.e);\n        return t.textContent || t.innerText;\n    };\n    return self;\n}, // Pre-instantiate the class on each call so that you never need to use `new`.\n$d0e0ac82cf77fdb6$var$VDOM = (elem, attr)=>new $d0e0ac82cf77fdb6$var$X(elem, attr)\n; // eslint-disable-line no-undef\n$d0e0ac82cf77fdb6$var$VDOM.DOM = (...nodes)=>{\n    // Create a document fragment. Grab and loop through the in-memory DOM nodes, and _move_ them to the\n    const f = document.createDocumentFragment(), n = new $d0e0ac82cf77fdb6$var$X('div')._(nodes).dom().childNodes;\n    while(n.length)f.appendChild(n[0]);\n    return f;\n};\n$d0e0ac82cf77fdb6$var$VDOM.t = (str)=>document.createTextNode(str)\n; // eslint-disable-line no-undef\n$d0e0ac82cf77fdb6$var$VDOM.h = (str)=>{\n    const f = document.createDocumentFragment(), n = new $d0e0ac82cf77fdb6$var$X('div').h(str).dom().childNodes;\n    while(n.length)f.appendChild(n[0]);\n    return f;\n};\n$d0e0ac82cf77fdb6$exports = $d0e0ac82cf77fdb6$var$VDOM;\n\n\nmodule.exports = {\n    DQuery: (/*@__PURE__*/$parcel$interopDefault($d06b2385a2707aa5$exports)),\n    Delegate: (/*@__PURE__*/$parcel$interopDefault($2d9f69bafd62bfe5$exports)),\n    VDOM: (/*@__PURE__*/$parcel$interopDefault($d0e0ac82cf77fdb6$exports))\n};\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,data:application/json;charset=utf-8;base64,"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}