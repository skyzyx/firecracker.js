{"mappings":"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","sources":["dist/index.js"],"sourcesContent":["function $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\n$parcel$export(module.exports, \"VERSION\", () => $690703a408b303b8$export$a4ad2735b021c132);\n$parcel$export(module.exports, \"DQuery\", () => $d06b2385a2707aa5$export$2e2bcd8739ae039);\n$parcel$export(module.exports, \"Delegate\", () => $2d9f69bafd62bfe5$export$2e2bcd8739ae039);\n$parcel$export(module.exports, \"VDOM\", () => $d0e0ac82cf77fdb6$export$2e2bcd8739ae039);\nvar $d06b2385a2707aa5$exports = {};\n\n$parcel$defineInteropFlag($d06b2385a2707aa5$exports);\n\n$parcel$export($d06b2385a2707aa5$exports, \"default\", () => $d06b2385a2707aa5$export$2e2bcd8739ae039);\n// ## DQueryNode\n//\n// `DQueryNode` is a private class. Not exposed to the public.\n//\n// Individual elements are wrapped in a `DQueryNode` object. This allows us to\n// extend the functionality. You won't use this directly, but rather as the\n// result of using `DQuery` to discover results.\n/**\n * Individual elements are wrapped in a `DQueryNode` object. This allows us to\n * extend the functionality. You won't use this directly, but rather as the\n * result of using DQuery to discover results.\n *\n * @param {Element} node (Required) A DOM `Element` object. See\n *     <https://developer.mozilla.org/en-US/docs/Web/API/Element> for more\n *     information.\n * @private\n */ class $d06b2385a2707aa5$var$DQueryNode {\n    /**\n   * DQueryNode wraps DOM Element objects with enhanced functionality.\n   *\n   * @param {Element} node A DOM Element object, which represents an HTML tag.\n   */ constructor(node){\n        this.node = node;\n    }\n    // ----\n    // ### Querying/Traversing the DOM tree\n    // **Example:**\n    //\n    // ```javascript\n    // $('query')[0].get();\n    // $(document.body).get();\n    // ```\n    /**\n   * Gets the underlying native DOM Element object.\n   *\n   * @returns Element\n   */ get() {\n        return this.node;\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $('query').ancestor('.example').get();\n    // $('query').ancestor().get(); // ← No selector == parent.\n    // ```\n    /**\n   * Gets the nearest ancestor which matches a selector. If no selector is\n   * given, returns parent.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ ancestor(selector) {\n        selector = selector || '';\n        if (selector === '') return this.parent();\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.closest(selector));\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $('query').parent().get();\n    // ```\n    /**\n   * Gets the immediate parent element.\n   *\n   * @returns DQueryNode\n   */ parent() {\n        if (!this.node.parentNode) return null;\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.parentNode);\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $('query').descendants('.example')[0].get();\n    // $('query').descendants(); // ← No selector == children.\n    // ```\n    /**\n   * Gets all descendants which match a selector. If no selector is given,\n   * returns children.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQuery\n   */ descendants(selector) {\n        selector = selector || '';\n        if (selector === '') return this.children();\n        return new $d06b2385a2707aa5$var$DQuery(selector, this.node); // eslint-disable-line no-undef\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $('query').children(); // ← All direct children.\n    // $('query').children('.example');\n    // ```\n    /**\n   * Gets all immediate child HTML elements which match a selector. Excludes\n   * whitespace nodes, comment nodes, etc.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns []DQueryNode\n   */ children(selector) {\n        selector = selector || '';\n        return Array.from(this.node.childNodes).filter((e)=>e.nodeType === Node.ELEMENT_NODE\n        ).filter((e)=>selector !== '' && e.matches(selector) || selector === ''\n        ).map((e)=>new $d06b2385a2707aa5$var$DQueryNode(e)\n        );\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $('query').siblings().forEach($e => {\n    //   return $e.remove('enabled')\n    // })\n    // ```\n    /**\n   * Gets all sibling HTML elements of the immediate parent which match a\n   * selector. Excludes self, whitespace nodes, comment nodes, etc.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns []DQueryNode\n   */ siblings(selector) {\n        selector = selector || '';\n        if (!this.node.parentNode) return [];\n        let sibling = this.node.parentNode.firstChild;\n        const siblings = [];\n        while(sibling){\n            if (sibling !== this.node) {\n                if (sibling.nodeType === Node.ELEMENT_NODE && (selector !== '' && sibling.matches(selector) || selector === '')) siblings.push(new $d06b2385a2707aa5$var$DQueryNode(sibling));\n            }\n            sibling = sibling.nextSibling;\n        }\n        return siblings;\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // const start = $('query')[0];\n    // while (start.next() != null) {\n    //   console.debug(start.next());\n    //   start = start.next();\n    // }\n    // ```\n    /**\n   * Gets the immediately-next sibling which matches a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ next(selector) {\n        selector = selector || '';\n        let next = this.node.nextSibling;\n        while(next){\n            if (next.nodeType === Node.ELEMENT_NODE && (selector !== '' && next.matches(selector) || selector === '')) return new $d06b2385a2707aa5$var$DQueryNode(next);\n            next = next.nextSibling;\n        }\n        return null;\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // const start = $('query')[0];\n    // while (start.prev() != null) {\n    //   console.debug(start.prev());\n    //   start = start.prev();\n    // }\n    // ```\n    /**\n   * Gets the immediately-previous sibling which matches a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DQueryNode\n   */ prev(selector) {\n        selector = selector || '';\n        let prev = this.node.previousSibling;\n        while(prev){\n            if (prev.nodeType === Node.ELEMENT_NODE && (selector !== '' && prev.matches(selector) || selector === '')) return new $d06b2385a2707aa5$var$DQueryNode(prev);\n            prev = prev.previousSibling;\n        }\n        return null;\n    }\n    // ----\n    // ### Injecting new DOM nodes\n    // **Example:**\n    //\n    // ```javascript\n    // $(document.body).prepend(\n    //   _('p#abc').h('This is my paragraph!')\n    // ).get();\n    // //=> HTMLParagraphElement\n    // ```\n    /**\n   * Prepends the provided element to the selected node, then returns a pointer\n   * to the prepended node in the DOM.\n   *\n   * @param {string|Element} element (Required) The DOM element or HTML string\n   *     to prepend.\n   * @returns DQueryNode\n   */ prepend(element) {\n        if ((typeof element).toLowerCase() === 'string') this.node.insertAdjacentHTML('afterbegin', element);\n        else if (typeof element.dom !== 'undefined') this.node.insertAdjacentElement('afterbegin', element.dom());\n        else this.node.insertAdjacentElement('afterbegin', element);\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.childNodes[0]);\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $(document.body).append(\n    //   _('p#abc').h('This is my paragraph!')\n    // ).get();\n    // //=> HTMLParagraphElement\n    // ```\n    /**\n   * Appends the provided element to the selected node, then returns a pointer\n   * to the appended node in the DOM.\n   *\n   * @param {string|Element} element (Required) The DOM element or HTML string\n   *     to append.\n   * @returns DQueryNode\n   */ append(element) {\n        if ((typeof element).toLowerCase() === 'string') this.node.insertAdjacentHTML('beforeend', element);\n        else if (typeof element.dom !== 'undefined') this.node.insertAdjacentElement('beforeend', element.dom());\n        else this.node.insertAdjacentElement('beforeend', element);\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node.childNodes[this.node.childNodes.length - 1]);\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $(document.body).children()[0].before(\n    //   _('p#abc').h('This is my paragraph!')\n    // ).get();\n    // //=> HTMLParagraphElement\n    // ```\n    /**\n   * Inserts the provided element before the selected node, then returns a\n   * pointer to the added node in the DOM.\n   *\n   * @param {string|Element} element (Required) The DOM element or HTML string\n   *     to insert before.\n   * @returns DQueryNode\n   */ before(element) {\n        if (typeof element.dom !== 'undefined') this.node.before(element.dom());\n        else this.node.before(element);\n        return this.prev();\n    }\n    // **Example:**\n    //\n    // ```javascript\n    // $(document.body).children()[0].after(\n    //   _('p#abc').h('This is my paragraph!')\n    // ).get();\n    // //=> HTMLParagraphElement\n    // ```\n    /**\n   * Inserts the provided element after the selected node, then returns a\n   * pointer to the added node in the DOM.\n   *\n   * @param {string|Element} element (Required) The DOM element or HTML string\n   *     to insert after.\n   * @returns DQueryNode\n   */ after(element) {\n        if (typeof element.dom !== 'undefined') this.node.after(element.dom());\n        else this.node.after(element);\n        return this.next();\n    }\n    /**\n   * This is used for replacing the current content with new content, returning\n   * a new pointer to self.\n   *\n   * @param {string|Element} element (Required) The DOM element or HTML string\n   *     to replace the element's content with.\n   * @returns DQueryNode\n   */ render(element) {\n        if ((typeof element).toLowerCase() === 'string') this.node.innerHTML = element;\n        else if (typeof element.dom !== 'undefined' && typeof element.toString !== 'undefined') this.node.innerHTML = element.toString();\n        else {\n            const t = document.createElement('div');\n            t.appendChild(element);\n            this.node.innerHTML = t.innerHTML;\n        }\n        return new $d06b2385a2707aa5$var$DQueryNode(this.node);\n    }\n    // ----\n    // ### Managing classnames\n    // **Example:**\n    //\n    // ```javascript\n    // $('query')[0].classes();\n    // //=> DOMTokenList\n    // ```\n    /**\n   * Returns the list of classnames currently applied to the element.\n   *\n   * @returns DOMTokenList\n   */ classes() {\n        const node = this.node;\n        return node.classList;\n    }\n    // **Example:**\n    //\n    // ```html\n    // <body class=\"abc def ghi\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).has('abc');\n    // //=> true\n    //\n    // $(document.body).has('def');\n    // //=> true\n    //\n    // $(document.body).has('xyz');\n    // //=> false\n    // ```\n    /**\n   * Determines whether or not the element has the specified classname applied.\n   *\n   * @param {string} klass (Required) The classname to check on the element.\n   * @returns bool\n   */ has(klass) {\n        const node = this.node;\n        return node.classList.contains(klass);\n    }\n    // **Example:**\n    //\n    // ```html\n    // Before: <body class=\"abc\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).add('def');\n    // ```\n    //\n    // ```html\n    // After: <body class=\"abc def\">\n    // ```\n    /**\n   * Adds the specified classname to the element.\n   *\n   * @param {string} klass (Required) The classname to add to the element.\n   * @returns bool\n   */ add(klass) {\n        const node = this.node;\n        return node.classList.add(klass);\n    }\n    // **Example:**\n    //\n    // ```html\n    // Before: <body class=\"abc def\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).remove('def');\n    // ```\n    //\n    // ```html\n    // After: <body class=\"abc\">\n    // ```\n    /**\n   * Removes the specified classname to the element.\n   *\n   * @param {string} klass (Required) The classname to remove from the element.\n   * @returns bool\n   */ remove(klass) {\n        const node = this.node;\n        return node.classList.remove(klass);\n    }\n    // **Example:**\n    //\n    // ```html\n    // Before: <body class=\"abc\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).replace('abc', 'xyz');\n    // ```\n    //\n    // ```html\n    // After: <body class=\"xyz\">\n    // ```\n    /**\n   * Replaces the specified classname on the element with another classname.\n   *\n   * @param {string} klass1 (Required) The classname to remove from the element.\n   * @param {string} klass2 (Required) The classname to add to the element.\n   * @returns bool\n   */ replace(klass1, klass2) {\n        const node = this.node;\n        return node.classList.replace(klass1, klass2);\n    }\n    // **Example:**\n    //\n    // ```html\n    // Before: <body class=\"abc def\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).toggle('def');\n    // ```\n    //\n    // ```html\n    // After: <body class=\"abc\">\n    // ```\n    //\n    // ```javascript\n    // $(document.body).toggle('def');\n    // ```\n    //\n    // ```html\n    // After-After: <body class=\"abc def\">\n    // ```\n    /**\n   * Toggles a classname on the element. Returns a boolean value, `true` or\n   * `false`, indicating whether or not `klass` is in the list of classnames\n   * after the call or not.\n   *\n   * @param {string} klass (Required) The classname to toggle on the element.\n   * @returns bool\n   */ toggle(klass) {\n        const node = this.node;\n        return node.classList.toggle(klass);\n    }\n    // ----\n    // ### Events\n    // **Example:**\n    //\n    // ```javascript\n    // const listen = Delegate;\n    //\n    // // Add event\n    // const evt = $(document.body).on('click',\n    //   listen('.example', evt => {\n    //     $(evt.target).toggle('enabled')\n    //   })\n    // );\n    //\n    // // Remove event\n    // evt.remove();\n    // ```\n    /**\n   * A wrapper for addEventListener with `once: false`.\n   *\n   * @param {string} type A valid event type, like `click`. See\n   *     <https://developer.mozilla.org/en-US/docs/Web/Events> for more\n   *     information.\n   * @param {string|function|Delegate} fn A callback function to execute, or a\n   *     string containing the name of the function.\n   * @returns EventPointer\n   */ on(type, fn) {\n        const node = this.node;\n        node.addEventListener(type, fn, {\n            once: false\n        });\n        return {\n            remove: function() {\n                node.removeEventListener(type, fn, {\n                    once: false\n                });\n            }\n        };\n    }\n}\n// ----\n// ## DQuery\n//\n// Main interface for DQuery.\n/**\n * Main interface for DQuery.\n *\n * Fundamentally, `DQuery` is a wrapper around `querySelectorAll()`, except that\n * the matches are also wrapped with `DQueryNode`. This allows us to extend the\n * functionality.\n *\n * @param {string|Element} selector (Required) Either a (string) CSS selector\n *     (which will always result in an array of `DQueryNode` objects), or a DOM\n *     `Element` object (which will always result in a single `DQueryNode`\n *     element). See <https://developer.mozilla.org/en-US/docs/Web/API/Element>\n *     for more information.\n * @param {Element} elem (Optional) a DOM `Element` object which should be used\n *     as the parent-most element for the query. See\n *     <https://developer.mozilla.org/en-US/docs/Web/API/Element> for more\n *     information. The default value is `document`, which resolves to the\n *     `<html>` element.\n * @returns []DQueryNode|DQueryNode\n */ function $d06b2385a2707aa5$var$DQuery(selector, elem) {\n    // If we received a DOM `Element` object, just wrap it and return it.\n    if (selector instanceof Element) return new $d06b2385a2707aa5$var$DQueryNode(selector);\n    // If the `elem` parameter is not provided, use `document` (`<html>`)as the\n    // default root element for the query. Take the results, wrap each one with\n    // `DQueryNode`, and return the collection.\n    const collection = [];\n    elem = elem || document;\n    if (elem === document) {\n        document.querySelectorAll(selector).forEach((ee)=>{\n            collection.push(new $d06b2385a2707aa5$var$DQueryNode(ee));\n        });\n        return collection;\n    }\n    // If the `elem` parameter _is_ provided (which _may_ be an array of results),\n    // iterate over each of the results, then use `:scope` in the selector to\n    // filter to only children of `elem` (as opposed to `document`). This will\n    // give us the results we expect instead of too many results.\n    selector = [\n        ':scope',\n        selector\n    ].join(' ');\n    if (typeof elem[Symbol.iterator] !== 'function') elem = [\n        elem\n    ];\n    elem.forEach((e)=>{\n        e.querySelectorAll(selector).forEach((ee)=>{\n            collection.push(new $d06b2385a2707aa5$var$DQueryNode(ee));\n        });\n    });\n    return collection;\n}\nvar // Default export for the package.\n$d06b2385a2707aa5$export$2e2bcd8739ae039 = $d06b2385a2707aa5$var$DQuery;\n\n\nvar $2d9f69bafd62bfe5$exports = {};\n\n$parcel$defineInteropFlag($2d9f69bafd62bfe5$exports);\n\n$parcel$export($2d9f69bafd62bfe5$exports, \"default\", () => $2d9f69bafd62bfe5$export$2e2bcd8739ae039);\n// Taken from https://github.com/brunoscopelliti/delegate under the MIT license.\n// Reversed the `(selector, fn)` parameters.\n// **Example:**\n//\n// ```javascript\n// const listen = Delegate;\n//\n// // Add event\n// const evt = $(document.body).on('click',\n//   listen('.example', evt => {\n//     $(evt.target).toggle('enabled')\n//   })\n// );\n//\n// // Remove event\n// evt.remove();\n// ```\n/**\n * Assure that the provided function, `fn`, is executed only when its wrapping\n * function is called on a target that matches the `selector`.\n *\n * @name delegate\n * @param {string} selector\n * @param {function} fn\n *\n * @returns {function}\n */ const $2d9f69bafd62bfe5$var$Delegate = (selector, fn)=>function handler(event) {\n        const matchingEl = $2d9f69bafd62bfe5$var$matches(event.target, selector, this); // eslint-disable-line no-invalid-this\n        if (matchingEl !== null) fn.call(matchingEl, event);\n    }\n;\nvar // Default export for the package.\n$2d9f69bafd62bfe5$export$2e2bcd8739ae039 = $2d9f69bafd62bfe5$var$Delegate;\n// Private method. Not exposed to the public.\n/**\n * @name matches\n * @private\n */ const $2d9f69bafd62bfe5$var$matches = (target, selector, boundElement)=>{\n    if (target === boundElement) return null;\n    if (target.matches(selector)) return target;\n    if (target.parentNode) return $2d9f69bafd62bfe5$var$matches(target.parentNode, selector, boundElement);\n    return null;\n};\n\n\nvar $d0e0ac82cf77fdb6$exports = {};\n\n$parcel$defineInteropFlag($d0e0ac82cf77fdb6$exports);\n\n$parcel$export($d0e0ac82cf77fdb6$exports, \"default\", () => $d0e0ac82cf77fdb6$export$2e2bcd8739ae039);\n// VDOM is an updated ES6+ version of a Virtual DOM implementation I built in\n// 2008 before Virtual DOM even had a name yet.\n//\n// The term “Virtual DOM” refers to real DOM nodes that exist in memory, but are\n// not attached to the _live_ tree. This means that they can be modified and\n// manipulated in-memory without triggering repaints and reflows in the browser\n// engine, making modifications dramatically faster.\n//\n// By leveraging `DocumentFragment` objects under the hood, we can collect one\n// or more sibling elements together which do not have a shared parent node\n// until they are injected into the live DOM. This is fundamentally the same way\n// that `React.createElement()` works, and the syntax is very similar.\n//\n// **Examples:**\n//\n// From the <https://reactjs.org> homepage, this example generates a new DOM\n// element and appends it to the live DOM.\n//\n// ```javascript\n// class HelloMessage extends React.Component {\n//   render() {\n//     return (\n//       <div>\n//         Hello {this.props.name}\n//       </div>\n//     );\n//     // or...\n//     // return React.createElement(\n//     //   \"div\",\n//     //   null,\n//     //   \"Hello \",\n//     //   this.props.name\n//     // );\n//   }\n// }\n//\n// ReactDOM.render(\n//   React.createElement(\n//     HelloMessage, { name: \"Taylor\" }\n//   ),\n//   document.getElementById('hello-example')\n// );\n// ```\n//\n// Here's a (roughly) equivalent example using VDOM, except that there are no\n// _magical_ `props` because there are no `components`. Just standard functions\n// and variables.\n//\n// ```javascript\n// const _ = VDOM,\n//       $ = DQuery;\n//\n// function HelloMessage(props) {\n//   return `\n//     <div>\n//       Hello ${props.name}\n//     </div>\n//   `;\n//   // or...\n//   // return _('div').h(`Hello ${props.name}`);\n// }\n//\n// $('#hello-example')[0].append(\n//   HelloMessage({ name: \"Taylor\" })\n// );\n// ```\n//\n// VDOM sits much “closer to the metal”, which makes it (a) faster, and (b)\n// smaller. While it lacks some of the niceties like JSX, you can still use\n// `innerHTML` which gets you _most_ of the way there at very little cost.\n//\n// ----\nconst $d0e0ac82cf77fdb6$var$X = function(elem, attr) {\n    const self = this, RE_ID_OR_CLASS = /[\\.#]/u, RE_CSS_ATTRS = /\\[([^\\]]+)\\]/gu, ARR_NEXT = 1;\n    let key, k, match;\n    attr = attr || {\n    };\n    // Parse the CSS-style notation.\n    function notation() {\n        const att = {\n            class: [],\n            id: ''\n        }, kvPair = [];\n        if (!RE_ID_OR_CLASS.test(elem) && !RE_CSS_ATTRS.test(elem)) return {\n        };\n        // Collect all of the `[k=v]` blocks.\n        while((match = RE_CSS_ATTRS.exec(elem)) !== null)kvPair.push(match[1].split('='));\n        elem = elem.replace(RE_CSS_ATTRS, '');\n        const pieces = elem.split(RE_ID_OR_CLASS), elemType = pieces.shift();\n        kvPair.forEach((val, idx, arr)=>{\n            att[arr[idx][0]] = arr[idx][1];\n        });\n        // Support CSS/jQuery-style notation for generating elements with IDs and classnames.\n        let pos = elemType.length;\n        const classes = att['class'];\n        pieces.forEach((val, idx, arr)=>{\n            if (elem[pos] === '#') att.id = val;\n            else classes.push(val);\n            pos += arr[idx].length + ARR_NEXT;\n        });\n        att['class'] = classes;\n        if (!att['class'].length) delete att['class'];\n        if (att['id'] === '') delete att['id'];\n        return att;\n    }\n    // Merge options into a conglomo-hash!\n    attr = Object.assign(attr, notation());\n    // Construct the element, loop through the list of attributes and add them to the node.\n    if (RE_ID_OR_CLASS.test(elem)) self.e = document.createElement(elem.split(RE_ID_OR_CLASS).shift());\n    else self.e = document.createElement(elem);\n    if (attr) {\n        for(key in attr)if (Object.prototype.hasOwnProperty.call(attr, key)) {\n            if (typeof attr[key] === 'object' && typeof attr[key].length === 'number' && typeof attr[key].splice === 'function') attr[key] = attr[key].join(' ');\n            if (key.toString() === 'class') self.e.className = attr[key];\n            else if (key.toString() === 'data') {\n                for(k in attr[key])if (Object.prototype.hasOwnProperty.call(attr[key], k)) self.e.setAttribute(`data-${k}`, attr[key][k]);\n            } else self.e.setAttribute(key, attr[key]);\n        }\n    }\n    // Handle child nodes.\n    self._ = (obj)=>{\n        // If the object isn't an array, convert it to an array to maintain a single codepath below.\n        if (!Array.isArray(obj)) obj = [\n            obj\n        ];\n        // Loop through the indexed array of children. If the node is a `VDOM` object, convert it to\n        // DOM and append it. Otherwise, assume it's a real DOM node.\n        for(let i = 0, max = obj.length; i < max; i++){\n            if (typeof obj[i] === 'undefined') break;\n            if (typeof obj[i].dom !== 'undefined') self.e.appendChild(obj[i].dom());\n            else self.e.appendChild(obj[i]);\n        }\n        return self;\n    };\n    // Set the HTML\n    self.h = (str, replace)=>{\n        // Determine the default value for `replace`.\n        replace = replace || false;\n        // Set the value with innerHTML.\n        if (replace) self.e.innerHTML = str;\n        else self.e.innerHTML += str;\n        return self;\n    };\n    // Set the text\n    self.t = (str)=>{\n        // No parameters? Read the value instead. Alias for __t().\n        if (typeof str === 'undefined') return self.__t();\n        // Set the value\n        const text = document.createTextNode(str);\n        self.e.appendChild(text);\n        return self;\n    };\n    // Get DOMElement\n    self.dom = ()=>self.e\n    ;\n    // Get as HTML\n    self.toString = ()=>{\n        const t = document.createElement('div');\n        t.appendChild(self.e);\n        return t.innerHTML;\n    };\n    // Get as text\n    self.__t = ()=>{\n        const t = document.createElement('div');\n        t.appendChild(self.e);\n        return t.textContent || t.innerText;\n    };\n    return self;\n}, // Pre-instantiate the class on each call so that you never need to use `new`.\n$d0e0ac82cf77fdb6$var$VDOM = (elem, attr)=>new $d0e0ac82cf77fdb6$var$X(elem, attr)\n; // eslint-disable-line no-undef\n$d0e0ac82cf77fdb6$var$VDOM.DOM = (...nodes)=>{\n    // Create a document fragment. Grab and loop through the in-memory DOM nodes,\n    // and _move_ them to the `DocumentFragment`.\n    const f = document.createDocumentFragment(), n = new $d0e0ac82cf77fdb6$var$X('div')._(nodes).dom().childNodes;\n    while(n.length)f.appendChild(n[0]);\n    return f;\n};\n$d0e0ac82cf77fdb6$var$VDOM.t = (str)=>document.createTextNode(str)\n; // eslint-disable-line no-undef\n$d0e0ac82cf77fdb6$var$VDOM.h = (str)=>{\n    const f = document.createDocumentFragment(), n = new $d0e0ac82cf77fdb6$var$X('div').h(str).dom().childNodes;\n    while(n.length)f.appendChild(n[0]);\n    return f;\n};\nvar // Default export for the package.\n$d0e0ac82cf77fdb6$export$2e2bcd8739ae039 = $d0e0ac82cf77fdb6$var$VDOM;\n\n\nconst $690703a408b303b8$export$a4ad2735b021c132 = '1.0.1';\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,data:application/json;charset=utf-8;base64,"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}