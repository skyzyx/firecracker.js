{"mappings":"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","sources":["dist/query.js"],"sourcesContent":["class $bd82e4a2d7328044$var$DOMQueryNode {\n    /**\n   * DOMQueryNode wraps DOM Element objects with enhanced functionality.\n   *\n   * @param {Element} node A DOM Element object, which represents an HTML tag.\n   */ constructor(node){\n        this.node = node;\n    }\n    /**\n   * Gets the underlying native DOM Element object.\n   *\n   * @returns Element\n   */ get() {\n        return this.node;\n    }\n    /**\n   * Gets the nearest ancestor which matches a selector. If no selector is\n   * given, returns parent.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DOMQueryNode\n   */ ancestor(selector) {\n        selector = selector || '';\n        if (selector === '') return this.parent();\n        return new $bd82e4a2d7328044$var$DOMQueryNode(this.node.closest(selector));\n    }\n    /**\n   * Gets the immediate parent element.\n   *\n   * @returns DOMQueryNode\n   */ parent() {\n        if (!this.node.parentNode) return null;\n        return new $bd82e4a2d7328044$var$DOMQueryNode(this.node.parentNode);\n    }\n    /**\n   * Gets all descendants which match a selector. If no selector is given,\n   * returns children.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DOMQuery\n   */ descendants(selector) {\n        selector = selector || '';\n        if (selector === '') return this.children();\n        return new DOMQuery(selector, this.node); // eslint-disable-line no-undef\n    }\n    /**\n   * Gets all immediate children which match a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns []DOMQueryNode\n   */ children(selector) {\n        selector = selector || '';\n        return Array.from(this.node.childNodes).filter((e)=>e.nodeType === Node.ELEMENT_NODE\n        ).filter((e)=>selector !== '' && e.matches(selector) || selector === ''\n        ).map((e)=>new $bd82e4a2d7328044$var$DOMQueryNode(e)\n        );\n    }\n    /**\n   * Gets all sibling elements of the immediate parent which match a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns []DOMQueryNode\n   */ siblings(selector) {\n        selector = selector || '';\n        if (!this.node.parentNode) return [];\n        let sibling = this.node.parentNode.firstChild;\n        const siblings = [];\n        while(sibling){\n            if (sibling !== this.node) {\n                if (sibling.nodeType === Node.ELEMENT_NODE && (selector !== '' && sibling.matches(selector) || selector === '')) siblings.push(new $bd82e4a2d7328044$var$DOMQueryNode(sibling));\n            }\n            sibling = sibling.nextSibling;\n        }\n        return siblings;\n    }\n    /**\n   * Gets the immediately-next sibling which matches a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DOMQueryNode\n   */ next(selector) {\n        selector = selector || '';\n        let next = this.node.nextSibling;\n        while(next){\n            if (next.nodeType === Node.ELEMENT_NODE && (selector !== '' && next.matches(selector) || selector === '')) return new $bd82e4a2d7328044$var$DOMQueryNode(next);\n            next = next.nextSibling;\n        }\n        return null;\n    }\n    /**\n   * Gets the immediately-previous sibling which matches a selector.\n   *\n   * @param {string} selector (Optional) CSS selector to match, if any.\n   * @returns DOMQueryNode\n   */ prev(selector) {\n        selector = selector || '';\n        let prev = this.node.previousSibling;\n        while(prev){\n            if (prev.nodeType === Node.ELEMENT_NODE && (selector !== '' && prev.matches(selector) || selector === '')) return new $bd82e4a2d7328044$var$DOMQueryNode(prev);\n            prev = prev.previousSibling;\n        }\n        return null;\n    }\n    /**\n   * Prepends the provided element to the selected node, then returns a pointer\n   * to the prepended node in the DOM.\n   *\n   * @param {Element} element (Required) The DOM element to prepend.\n   * @returns DOMQueryNode\n   */ prepend(element) {\n        if (typeof element.dom !== 'undefined') this.node.insertAdjacentElement('afterbegin', element.dom());\n        else this.node.insertAdjacentElement('afterbegin', element);\n        return new $bd82e4a2d7328044$var$DOMQueryNode(this.node.childNodes[0]);\n    }\n    /**\n   * Appends the provided element to the selected node, then returns a pointer\n   * to the appended node in the DOM.\n   *\n   * @param {Element} element (Required) The DOM element to append.\n   * @returns DOMQueryNode\n   */ append(element) {\n        if (typeof element.dom !== 'undefined') this.node.insertAdjacentElement('beforeend', element.dom());\n        else this.node.insertAdjacentElement('beforeend', element);\n        return new $bd82e4a2d7328044$var$DOMQueryNode(this.node.childNodes[this.node.childNodes.length - 1]);\n    }\n    /**\n   * Inserts the provided element before the selected node, then returns a\n   * pointer to the added node in the DOM.\n   *\n   * @param {Element} element (Required) The DOM element to insert before.\n   * @returns DOMQueryNode\n   */ before(element) {\n        if (typeof element.dom !== 'undefined') this.node.before(element.dom());\n        else this.node.before(element);\n        return this.prev();\n    }\n    /**\n   * Inserts the provided element after the selected node, then returns a\n   * pointer to the added node in the DOM.\n   *\n   * @param {Element} element (Required) The DOM element to insert after.\n   * @returns DOMQueryNode\n   */ after(element) {\n        if (typeof element.dom !== 'undefined') this.node.after(element.dom());\n        else this.node.after(element);\n        return this.next();\n    }\n    /**\n   * A wrapper for addEventListener with `once: false`.\n   *\n   * @param {string} type A valid event type, like `click`. See\n   *     <https://developer.mozilla.org/en-US/docs/Web/Events> or more information.\n   * @param {string|function|DOMListen} fn A callback function to execute, or a string\n   *     containing the name of the function.\n   * @returns EventPointer\n   */ on(type, fn) {\n        const node = this.node;\n        node.addEventListener(type, fn, {\n            once: false\n        });\n        return {\n            remove: function() {\n                node.removeEventListener(type, fn, {\n                    once: false\n                });\n            }\n        };\n    }\n}\nmodule.exports = DOMQuery = function(selector, elem) {\n    if (selector instanceof Element) return new $bd82e4a2d7328044$var$DOMQueryNode(selector);\n    const collection = [];\n    elem = elem || document;\n    if (elem === document) {\n        document.querySelectorAll(selector).forEach((ee)=>{\n            collection.push(new $bd82e4a2d7328044$var$DOMQueryNode(ee));\n        });\n        return collection;\n    }\n    selector = [\n        ':scope',\n        selector\n    ].join(' ');\n    if (typeof elem[Symbol.iterator] !== 'function') elem = [\n        elem\n    ];\n    elem.forEach((e)=>{\n        e.querySelectorAll(selector).forEach((ee)=>{\n            collection.push(new $bd82e4a2d7328044$var$DOMQueryNode(ee));\n        });\n    });\n    return collection;\n};\n\n\n//# sourceMappingURL=query.js.map\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,data:application/json;charset=utf-8;base64,"],"names":[],"version":3,"file":"query.js.map","sourceRoot":"../"}